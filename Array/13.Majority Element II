Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
Return an array of elements.
If no majority element exists, return empty array.
Input: [8,8,6,6,6,8,8]
Output: [8,6]

Hint: extended on (Boyer–Moore majority vote algorithm)
Hint2: For appearance n/3, atmost 2 elements can be there

 vector<int> majorityElement(vector<int>& a) {
        int n = a.size();
        vector<int> res;
        
        int c1=-1,c2=-1;  //2 candidate as atmost 2 elements can be there
        int count1=0, count2 = 0;
        for(int i = 0; i<n; i++){
          if(a[i]==c1) count1++;
          else if(a[i]==c2) count2++;
          else if(count1==0){
              c1=a[i];
              count1=1;
          }
          else if(count2==0){
              c2=a[i];
              count2=1;
          }  
          else{
              count1--;
              count2--;
          }
        }
        
        count1=0;
        count2=0;
        for(int i=0; i<n; i++){
            if(a[i]==c1) count1++;
            else if(a[i]==c2) count2++;
        }
                   
        if(count1>n/3) res.push_back(c1);
        if(count2>n/3) res.push_back(c2);
        return res;
    }
