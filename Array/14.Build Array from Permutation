//Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
//A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
//Input: nums = [5,0,1,2,3,4]
//Output: [4,5,0,1,2,3]


//O(n) Space->O(n)
vector<int> buildArray(vector<int>& nums) {
   vector<int> ans;
    for(int i=0; i<a.size(); i++){
         ans.push_back(a[a[i]]);
    }
    return ans;
 }
        
 //Very Tricky       
 //O(n) Space->O(1)   
 vector<int> buildArray(vector<int>& nums) {       
        int n=nums.size();
        for(int i=0;i<n;i++){
            nums[i]=nums[i]+(n*(nums[nums[i]]%n));    //creating a number which has its OG value as well as new value
        }
        for(int i=0;i<n;i++){
            nums[i]/=n;    //by this we are removing OG value, now only new value is there
        }
        return nums;
    }
