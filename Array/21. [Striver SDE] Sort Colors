Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

//Idea:
- 3 pointer, we iterate using mid
- low and high are the boundary pointers which points to end and start of 0's and 2's respectively

void sortColors(vector<int>& nums) {
        int low = 0;
        int  mid = 0;
        int high = nums.size() - 1;
        
        while(mid<=high){
            if(nums[mid] == 0)
                swap(nums[low++], nums[mid++]);
            
            else if(nums[mid] == 1)
                mid++;
            
            else if(nums[mid] == 2)
                swap(nums[mid], nums[high--]);
            
        }
        
    }
