Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].


//Idea:
- Divide and Conquer - MergeSort


int merge(vector<int>& nums, int low, int mid, int high){
        int count = 0;
        int j = mid+1;
        
        for(int i = low; i <= mid; i++){                      //Only this is added to the mergeSort, rest all is same
            while(j<=high && nums[i] > 2LL * nums[j]) j++;
            count += j - (mid+1);
        }
        
        vector<int>temp;
        int i = low;
        j = mid+1;
        while(i<=mid && j<=high){
            if(nums[i]<=nums[j]){
                temp.push_back(nums[i++]);
            }
            else{
                temp.push_back(nums[j++]);
            }
        }
        
        while(i<=mid) temp.push_back(nums[i++]);      
        while(j<=high) temp.push_back(nums[j++]);
        
        for(int k = low; k<=high; k++)
            nums[k] = temp[k-low];
        
        return count;
    }
    
    int mergeSort(vector<int>& nums, int low, int high){
        if(low < high){
            int mid = (low+high)/2;
            int inv = mergeSort(nums, low, mid);
            inv += mergeSort(nums, mid+1, high);
            inv += merge(nums, low, mid, high);
            return inv;
        }
        else return 0;
    }
    
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size()-1);
    }
