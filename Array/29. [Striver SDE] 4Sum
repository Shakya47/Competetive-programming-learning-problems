Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        vector<vector<int>> ans;
        if(nums.size() < 4) return ans;
        if(nums.empty()) return ans;
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i<nums.size(); i++){
            for(int j = i+1; j<nums.size(); j++){
                
                int target_2 = target - nums[i] - nums[j];
                
                int front = j+1;
                int back = nums.size()-1;
                while(front < back){
                    int two_sum = nums[front] + nums[back];
                    
                    if(two_sum > target_2) back--;
                    else if(two_sum < target_2) front++;
                    else{
                        vector<int>quad;
                        quad.push_back(nums[i]);
                        quad.push_back(nums[j]);
                        quad.push_back(nums[front]);
                        quad.push_back(nums[back]);
                        ans.push_back(quad);
                        
                        while(front < back && nums[front] == quad[2])front++;
                        while(front < back && nums[back] == quad[3]) back--;
                    }

                }
                
                while(j+1 < nums.size() && nums[j]==nums[j+1]) j++;
                while(i+1 < nums.size() && nums[i]==nums[i+1]) i++;

            }
        }
        return ans;
    }
