Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 


static bool cmp(pair<Item,double> &a, pair<Item,double> &b){
        return a.second > b.second;
    }
    
double fractionalKnapsack(int W, Item arr[], int n)
{
    vector<pair<Item,double> >knapsack;
    for(int i = 0; i<n; i++){
        knapsack.push_back(make_pair(arr[i], double(arr[i].value)/double(arr[i].weight)));
    }

    sort(knapsack.begin(), knapsack.end(), cmp);

    double ans = 0.0;
    for(int i = 0; i<n && W>0; i++){
        if(knapsack[i].first.weight<=W){
            ans += knapsack[i].first.value;
            W -= knapsack[i].first.weight;
        }
        else{
            ans += (double(W)/double(knapsack[i].first.weight))*double(knapsack[i].first.value);
            break;
        }
    }
    return ans;
}
