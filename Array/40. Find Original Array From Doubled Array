An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, 
and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. 
The elements in original may be returned in any order.

//Idea:
- the doubled array should be even length
- sort the array -> most important
- store in a map with their frequencied

vector<int> findOriginalArray(vector<int>& changed) {
    int n = changed.size();
    if(n%2 != 0) return {};
    vector<int>res;
    map<int,int> mp;
    sort(changed.begin(), changed.end());
    
    for(int i = 0; i<n; i++){
        mp[changed[i]]++;
    }

    for(int i = 0; i<n; i++){
        if(mp[changed[i]] == 0) continue;
        if(mp[changed[i]*2] == 0) return {};  //as there exists a double of something but something doesn't exist 
        res.push_back(changed[i]);
        mp[changed[i]]--;
        mp[changed[i]*2]--;
    }

    return res;
}
