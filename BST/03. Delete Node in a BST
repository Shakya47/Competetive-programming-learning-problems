//Idea:
- While deleting we have to maintain the BST property
- We will replace the node which is to be deleted by either its closest lower value or closest higher value
- We chose closes higher value - we find it by going to the right of the node and finding left-most node
- Replace the closest higher value with the node to be deleted.
- Now delete this closest higher value by recursively calling the function to delete the closes highest value


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int inSuccessor(TreeNode* root){    //to find successor we use root->right, then left most root->left (smallest of right tree or closest greatest val)
        TreeNode* cur = root;           //or we can also do root->left, then right most root->right (greatest of left tree or closest smallest val)
        while(cur->left!=NULL)
            cur = cur->left;
        return cur->val;
    }
    
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL) return NULL;
        
        if(key < root->val)     //Key is smaller, that means its on left
            root->left = deleteNode(root->left, key);  
       
        else if(key > root->val)    //Key is greater, this means its on right
            root->right = deleteNode(root->right, key);
       
        else{   //found the node to be deleted
            if(root->left == NULL) return root->right;  //link root->right with the ancestor 
            else if(root->right == NULL) return root->left; //link root->left with the ancestor 
            else{   //if both left right are not NULL
                root->val = inSuccessor(root->right);   //find the successor and replace the val of root with the successor
                root->right = deleteNode(root->right, root->val);  //delete the root->val node from the right tree
            }
        }
        return root;
    }
};

JavaScript:
const successor = function(root){
    let cur = root;
    while(cur.left !== null){
        cur = cur.left;
    }
    return cur.val;
}

var deleteNode = function(root, key) {
    if(root === null) return null;
    if(root.val > key){
        root.left = deleteNode(root.left, key);
    }
    else if(root.val < key){
        root.right = deleteNode(root.right, key);
    }
    else{
        if(root.left === null) return root.right;
        else if(root.right === null) return root.left;
        else{
            root.val = successor(root.right);
            root.right = deleteNode(root.right, root.val);
        }
    }
    return root;
    
};
