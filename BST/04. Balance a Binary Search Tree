Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.
A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

Steps:
- Create a inorder vector because inorder traversal of BST is a sorted vector
- Mid of the vector would be the root
- left part from mid of vector would be left tree & vice - versa for right part


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<TreeNode*> inOrder;
    void mkInOrder(TreeNode*root){    //Creating an inorder vector
        if(root == NULL) return;
        mkInOrder(root->left);
        inOrder.push_back(root);
        mkInOrder(root->right);
    }
    
    TreeNode* createBal(int s, int e){
        if(s > e) return NULL;  //base case
        int mid = (s + e)/2;
        TreeNode* root = inOrder[mid];
        root->left = createBal(s, mid-1);
        root->right = createBal(mid+1, e);
        return root;
    }
    
public:
    TreeNode* balanceBST(TreeNode* root) {
        mkInOrder(root);
        int start, end;
        start = 0;
        end = inOrder.size()-1;
        root = createBal(start, end);
        return root;
    }
};
