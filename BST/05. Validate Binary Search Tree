Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
- The left subtree of a node contains only nodes with keys less than the node's key.
- The right subtree of a node contains only nodes with keys greater than the node's key.
- Both the left and right subtrees must also be binary search trees.

//Idea: 
- We will be doing inorder traversal, as inorder gives the elements in sorted order
- If there is a wrong value, it will be detected
- we will keep storing the current value after comparison in a prev variable

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    long long int prev = -2147483649;   //for corner case, to avoid overflow of INT_MIN
public:
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;
        if(isValidBST(root->left)==false) return false;
        if(root->val <= prev) return false; //next value should be greater than previous value, as its sorted
        prev = root->val; //moving prev to the next 
        return isValidBST(root->right);
    }
};
