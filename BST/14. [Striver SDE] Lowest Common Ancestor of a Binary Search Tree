Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the 
lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”


//Same as Binary Tree problem, but for BST it's not optimal

TreeNode* find(TreeNode* root, int p, int q){
    if(root == NULL) return NULL;
    if(root->val == p || root->val == q)   
        return root;
    TreeNode* lca1 = find(root->left, p, q);    
    TreeNode* lca2 = find(root->right, p, q);   
    if(lca1 != NULL && lca2 != NULL) return root;   
    if(lca1 != NULL) return lca1;   
    else return lca2;   
}

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    return find(root, p->val, q->val);
}

//Optimal 

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if(root == NULL) return NULL;
    if(root->val > p->val && root->val > q->val) return lowestCommonAncestor(root->left, p, q);
    if(root->val < p->val && root->val < q->val) return lowestCommonAncestor(root->right, p, q);
    return root;
}
