You are given a BST (Binary search tree) with’ N’ number of nodes and a value ‘X’. 
Your task is to find the greatest value node of the BST which is smaller than or equal to ‘X’.
Note :‘X’ is not smaller than the smallest node of BST .


//Naive
void findFloor(TreeNode<int>*root, int x, int &floorVal){
    if(root == NULL) return;
    findFloor(root->left, x, floorVal);
    if(root->val <= x && root->val >=floorVal) floorVal = root->val;
    findFloor(root->right, x, floorVal);
}

int floorInBST(TreeNode<int> * root, int X)
{
    int floorVal = INT_MIN;
    findFloor(root, X, floorVal);
    return floorVal;
}

//Optimal - as this is BST, use its property

int floorInBST(TreeNode<int> * root, int X)
{
    int floorVal = INT_MIN;
    while(root !=NULL){
        if(root->val == X)return floorVal = root->val;
        if(root->val<X){
            floorVal = root->val;
            root = root->right;
        }
        else root = root->left;
    }
    return floorVal;
}

