The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above


bool isSafe(int n, int row, int col, vector<string>& board){
    //for row
    for(int i = 0; i<col; i++){
        if(board[row][i] == 'Q')
            return false;
    }
    //for left top diagonal
    for(int i = row, j = col; i>=0 && j>=0; i--,j--)
        if(board[i][j] == 'Q') return false;        

    //for left bottom diagonal
    for(int i = row, j = col; i<n && j>=0; i++, j--)
        if(board[i][j] == 'Q') return false;  

    return true;
}

void f(int col, int n, vector<string>& board, vector<vector<string>>& ans){
    if(col == n) {
        ans.push_back(board);
        return;
    }
    for(int i = 0; i<n; i++){
        if(isSafe(n,i,col,board)){
            board[i][col] ='Q';
            f(col+1, n, board, ans);
            board[i][col] = '.';
        }
    }
}


vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> ans;

    vector<string> board(n);
    string ds(n, '.');
    for(int i = 0; i<n; i++){
        board[i] = ds;      //very important, we are making a 1D vector behave like a 2D vector
    }

    f(0,n,board, ans);
    return ans;
}
