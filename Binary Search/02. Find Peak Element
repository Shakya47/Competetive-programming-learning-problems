A peak element is an element that is strictly greater than its neighbors.
Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž.
You must write an algorithm that runs in O(log n) time.

//Idea - 
- if arr[i-1] > arr[i], then there exists a peak b/w 0 to i-1
- if a[i+1] > arr[i], then there exists a peak b/w i to arr.size() - 1

int findPeakElement(vector<int>& nums) {
    int low = 0, high = nums.size()-1;
    while(low <= high){
        int mid = (high + low)/2;
        if((mid == 0 || nums[mid] > nums[mid - 1]) && (mid == nums.size()-1 || nums[mid]> nums[mid+1]))
            return mid;
        if(mid >0 && nums[mid] < nums[mid-1]) high = mid - 1;
        else low = mid + 1;
    }
    return -1;
}
