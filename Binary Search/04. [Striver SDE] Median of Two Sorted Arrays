Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Idea: Very tricky but very easy to understand - Watch Striver's video
- Basic Idea is to Cut both the arrays such that the left part of both the cuts forms a subarray which is smaller than the subarray formed by the right cut
- Eg: [1,3,5,| 9,11] 
      [4,6,| 8,10] in this we have made at cut1 = 3 & cut2 = 2, hence the subarrays are [1,3,5][4,6] & [9,11][8,10]
- for cut1 we use simple binary search mid formula
- for cut2 we use, (n2 + n1 + 1)/2 - cut1; we have done +1 to also handle the odd number of elements
- Our main conditions will be applied to 4 number viz, left1=5, left2=6, right1=9,right2=8
- left1 < right2 && left2 < right1


double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
     
    if(nums2.size() < nums1.size()) return findMedianSortedArrays(nums2, nums1);
    int n1 = nums1.size();
    int n2 = nums2.size();

    int low = 0, high = n1;

    while(low <= high){
        int cut1 = (high + low)/2;
        int cut2 = (n2 + n1 + 1)/2 - cut1;

        int left1 = (cut1 == 0 ? INT_MIN : nums1[cut1 - 1]);
        int left2 = (cut2 == 0 ? INT_MIN : nums2[cut2 - 1]);

        int right1 = (cut1 == n1 ? INT_MAX : nums1[cut1]);
        int right2 = (cut2 == n2 ? INT_MAX : nums2[cut2]);

        if(left1 <= right2 && left2 <= right1){
            if((n1 + n2)%2 == 0) return(max(left1,left2) + min(right1, right2))/2.0;
            else return (max(left1,left2));
        }

        else if(left1 > right2) high = cut1 - 1;
        else low = cut1 + 1;
    }
    return 0.0;
}
