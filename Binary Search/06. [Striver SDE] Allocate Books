Given an array of integers A of size N and an integer B.

College library has N bags,the ith book has A[i] number of pages.

You have to allocate books to B number of students so that maximum number of pages alloted to a student is minimum.

A book will be allocated to exactly one student.
Each student has to be allocated at least one book.
Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.
Calculate and return that minimum possible number.





bool isPossible(int mid, int n, vector<int> time){
    int chapter = 0;
    int day = 1;
    for(int i = 0; i < time.size(); i++){

        if(time[i] > mid) return false;
        if(chapter + time[i] > mid){
            chapter = time[i];
            day += 1;
        }
        else chapter += time[i];
    }
    if(day > n) return false;
    return true;
}

int Solution::books(vector<int> &time, int B) {
    if (B > time.size()) return -1;
    int low = time[0];
    int high = 0;
    for(int i = 0; i< time.size(); i++){
        low = min(low, time[i]);
        high += time[i];
    }
    while(low <= high){
        int mid = (low + high)/2;
        if(isPossible(mid, B, time)){
            high = mid - 1;
        }
        else low = mid + 1;
    }
    return low;
    
}

