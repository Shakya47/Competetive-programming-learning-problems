Given an array of integers A of size N and an integer B.

College library has N bags,the ith book has A[i] number of pages.

You have to allocate books to B number of students so that maximum number of pages alloted to a student is minimum.

A book will be allocated to exactly one student.
Each student has to be allocated at least one book.
Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.
Calculate and return that minimum possible number.

//Idea:
- We have to create a search space for binary search
- lowest allocation can be min.a[] and highest can be Sum.a[i]
- just take a mid and find if that's the answer by having a helper isPossible()

isPossible(a, m, mid){
        let student = 1;
        let pages = 0;
        
        for(let i = 0; i<a.length; i++){
            if(a[i] > mid) return false;
            if(a[i] + pages > mid){
                pages = a[i]; //because the pages for the next student will start from here
                student++;
            }
            else{
                pages += a[i];
            }
        }
        if(student > m) return false;
        return true;
    }
    
//Function to find minimum number of pages.
findPages(a, n, m)
{
    if(m > a.length) return -1;
    let low = a[0];
    let high = 0;

    for(let i = 0; i<a.length; i++){
        low = Math.min(low, a[i]);
        high += a[i];
    }

    while(low <= high){
        let mid = Math.floor((low + high) / 2);
        if(this.isPossible(a, m, mid)){
            high = mid - 1;
        }
        else{
            low = mid + 1;
        }
    }
    return low;
}

