Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.

//Idea:
- over here we noticed speed as monotonocity
- we have made left = 1 because that is the min speed of eating banana/hour
- we made right = max(piles) because that is the max speed of eating banana/hour
- in earlier problems we had to combine/make subarrays, but in this we have to eat one pile at a time

var minEatingSpeed = function(piles, h) {

    const isFeasible = (speed) => {
        let count = 0;

        for(let pile of piles) {
            if(pile < speed) {
                count++;
            } else {
                count += Math.ceil(pile/speed);
            }
        }
        return count <= h;
    }

    let left = 1;
    let right = Math.max(...piles);

    while(left < right) {
        let mid = left + Math.floor((right-left)/2);
        if(isFeasible(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    } 
    return left;
};
