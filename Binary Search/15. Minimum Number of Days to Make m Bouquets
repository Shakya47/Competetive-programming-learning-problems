You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

//Idea:
- remember that finding out the monotonocity is important
- more often than not it would be the question asked

var minDays = function (bloomDay, m, k) {

    const isFeasible = (minDays) => {
        let bq = 0;
        let fl = 0;
        for (let bloom of bloomDay) {
            if (bloom > minDays) {
                fl = 0;
            } else {
                fl++;
                if (fl >= k) {
                    bq++;
                    fl = 0;
                }
            }
        }
        return bq >= m;
    }

    if (bloomDay.length < m * k) {
        return -1;
    }

    let left = Math.min(...bloomDay);
    let right = Math.max(...bloomDay);

    while (left < right) {
        let mid = left + Math.floor((right - left) / 2);
        if (isFeasible(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
};
