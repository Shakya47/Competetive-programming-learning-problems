You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

 int climbStairs(int n) {
        int prev = 1;
        int prev2 = 1;
        for(int i = 2; i<=n; i++){
            int curi = prev + prev2;
            prev2 = prev;
            prev = curi;
        }
        return prev;
        
    }
``````````````````````````````````````````````````````
JavaScript:
Recursion (Top down approach - we consider our final answer and work our way to base case):
```````````
var climbStairs = function(n) {
    return rec(n);    
};

function rec(ind){
    if(ind <= 1){
        return 1;
    }
    return rec(ind - 1) + rec(ind - 2);
}

Memoization:
`````````````
var climbStairs = function(n) {
    let dp = Array(n+1).fill(-1); //size of the dp would be 
    return rec(n, dp);  
};

function rec(ind, dp){
    if(ind <= 1){
        return 1;
    }
    if(dp[ind] !== -1) return dp[ind];
    return dp[ind] = rec(ind - 1, dp) + rec(ind - 2, dp);
}

Tabulation (bottom up approach, we start with base case):
````````````
var climbStairs = function(n) {
    let dp = Array(n+1).fill(-1);
    dp[0] = 1; //base case
    dp[1] = 1; //base case

    for(let i = 2; i<=n; i++){
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
};

Space Optimized (as we are going linear, there is no need of dp array):
`````````````````
var climbStairs = function(n) {
    let prev1 = 1;
    let prev2 = 1;

    for(let i = 2; i<=n; i++){
        let curr = prev1 + prev2;
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
};
