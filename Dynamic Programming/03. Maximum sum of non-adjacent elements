You are given an array/list of ‘N’ integers. 
You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.

//Memoization: time: O(n) space: O(n) + O(n)
int find(int ind, vector<int> &nums, vector<int> &dp){
	if(ind == 0) return nums[0];
	if(ind<0) return 0;
	
	if(dp[ind]!= -1) return dp[ind];
  
	int take = nums[ind] + find(ind-2, nums,dp);
	int notTake = 0 + find(ind-1,nums,dp);
	
	return dp[ind] = max(take, notTake);
}

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
	vector<int>dp(n, -1);
	return find(n-1,nums,dp);
}


//Space optimized: time: O(n) space: O(1)
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
	int prev = nums[0];
	int prev2 = 0;
	for(int i = 1; i<n; i++){
		int take = nums[i];
		if(i>1) take += prev2;
		int notTake = 0 + prev;
		int cur = max(take, notTake);
		prev2 = prev;
		prev = cur;
	}
	return prev;
}
