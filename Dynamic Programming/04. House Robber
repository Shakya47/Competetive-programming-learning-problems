Mr. X is a professional robber planning to rob houses along a street. 
Each house has a certain amount of money hidden. All houses along this street are arranged in a circle. 
That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, 
and it will automatically contact the police if two adjacent houses were broken into on the same night.
You are given an array/list of non-negative integers 'ARR' representing the amount of money of each house. 
Your task is to return the maximum amount of money Mr. X can rob tonight without alerting the police.

//Idea:
- same as previous
- only difference is here the houses are circular, 1st and last house are adjacent
-- so 2,3,5 -> in this 2+5 cannot be the answer since 2 & 5 are circulary adjacent
- so compute the index 0 to arr.size()-2  & 1 to arr.size()-1
-- ie. 2,3 & 3,5

long long int maximumNonAdjacentSum(vector<int> &nums, int s, int e){
	long long int prev = nums[s];
	long long int prev2 = 0;
	for(int i = s+1; i<=e; i++){
		long long int take = nums[i];
		if(i>s+1) take += prev2;
		long long int notTake = 0 + prev;
		long long int cur = max(take, notTake);
		prev2 = prev;
		prev = cur;
	}
	return prev;
}

long long int houseRobber(vector<int>& valueInHouse)
{
    long long int loot1 = maximumNonAdjacentSum(valueInHouse, 0, valueInHouse.size()-2);
    long long int loot2 = maximumNonAdjacentSum(valueInHouse, 1, valueInHouse.size()-1);
	return max(loot1, loot2);
}
