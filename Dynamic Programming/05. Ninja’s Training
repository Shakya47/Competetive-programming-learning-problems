Ninja is planing this ‘N’ days-long training schedule. 
Each day, he can perform any one of these three activities. 
(Running, Fighting Practice or Learning New Moves). 
Each activity has some merit points on each day. 
As Ninja has to improve all his skills, he can’t do the same activity in two consecutive days. 
Can you help Ninja find out the maximum merit points Ninja can earn?
You are given a 2D array of size N*3 ‘POINTS’ with the points corresponding to each day and activity. 
Your task is to calculate the maximum number of merit points that Ninja can earn.

//Idea:
- Think in top down approach for recursion
- we are returning day & the last exercise performed
- we try all possible values for exercise excluding the last performed exercise
- for base case - maximum points excluding the last performed exercise
___________________________________________
//Recurion: time: O(2^n) space: O(n) //TLE
-------------------------------------------
int merit(int day, int last, vector<vector<int>> &points){
	if(day==0){
		int maxi = 0;
		for(int i =0; i<3; i++){
			if(i!=last){
				maxi = max(maxi, points[0][i]);
			}
		}
		return maxi;
	}
	int maxi =0;
	for(int task = 0; task < 3; task++){
		if(task != last){
			int point = points[day][task] + merit(day-1, task, points);
			maxi = max(point, maxi);
		}
	}
	return maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    return merit(n-1, 3, points);
}


______________________________________________
//Memoization - time: O(n) space: O(n) + O(n) 
-----------------------------------------------
int merit(int day, int last, vector<vector<int>> &points, vector<vector<int>> &dp){
	if(day==0){
		int maxi = 0;
		for(int i =0; i<3; i++){
			if(i!=last){
				maxi = max(maxi, points[0][i]);
			}
		}
		return dp[day][last] = maxi;
	}
	if(dp[day][last] != -1) return dp[day][last];
	int maxi =0;
	for(int task = 0; task < 3; task++){
		if(task != last){
			int point = points[day][task] + merit(day-1, task, points, dp);
			maxi = max(point, maxi);
		}
	}
	return dp[day][last] = maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{	
	vector<vector<int>> dp(n, vector<int>(4,-1));
    return merit(n-1, 3, points, dp);
}

_______________________________________________
//Tabulation - time: O(n) space: O(n)
-----------------------------------------------

int ninjaTraining(int n, vector<vector<int>> &points)
{
	vector<vector<int>>dp(n,vector<int>(4,0));
	dp[0][0] = max(points[0][1], points[0][2]);
	dp[0][1] = max(points[0][0], points[0][2]);
	dp[0][2] = max(points[0][1], points[0][0]);
	dp[0][3] = max(points[0][1], max(points[0][0],points[0][2]));
		
	for(int day = 1; day < n; day++)
		for(int last = 0; last<4; last++){
			dp[day][last] = 0;
			for(int task = 0; task<3; task++){
				if(task!=last){
					int point = points[day][task] + dp[day-1][task];
					dp[day][last] = max(point, dp[day][last]);
				}
			}
		}
	return dp[n-1][3];

}

___________________________________________
//Space Optimization - time: O(n) space: O(8)
-------------------------------------------
int ninjaTraining(int n, vector<vector<int>> &points)
{
	vector<int>prev(4,0);
	
	prev[0] = max(points[0][1], points[0][2]);
	prev[1] = max(points[0][0], points[0][2]);
	prev[2] = max(points[0][1], points[0][0]);
	prev[3] = max(points[0][1], max(points[0][0],points[0][2]));
		
	for(int day = 1; day < n; day++){
		vector<int>temp(4,0);
		for(int last = 0; last<4; last++){		
			temp[last]=0;
			for(int task = 0; task<3; task++){
				if(task!=last){
					temp[last] = max(points[day][task] + prev[task], temp[last]);
				}
			}			
		}
		prev = temp;
	}
	return prev[3];

}


