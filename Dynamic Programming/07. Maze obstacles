Given a ‘N’ * ’M’ maze with obstacles, count and return the number of paths to reach the right-bottom cell from the top-left cell. 
A cell in the given maze has a value -1 if it is a blockage or dead-end, else 0. 
From a given cell, we are allowed to move to cells (i+1, j) and (i, j+1) only. 
Since the answer can be large, print it modulo 10^9 + 7. <-- Remember this

//Same as Unique Grid problem with slight modification
_____________________________________________________
Memoization - time: O(n) space: O(n) + recursion stack
-----------------------------------------------------
int mod =(int)(1e9 + 7);
int f(int i, int j, vector< vector< int> > &mat, vector< vector< int> > &dp){
	if(i>=0 && j>=0 && mat[i][j]== -1) return 0;
	if(i==0 && j==0) return 1;
	if(i<0 || j<0) return 0;
	if(dp[i][j] != -1) return dp[i][j];
	int up = f(i-1,j,mat,dp);
	int left = f(i,j-1,mat,dp);
	return dp[i][j] = (up + left) % mod;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector< vector< int>> dp(n,vector<int>(m,-1));
	return f(n-1,m-1,mat,dp);
}

_____________________________________________________
Tabulation - time: O(n) space: O(n*m)
-----------------------------------------------------
int mod =(int)(1e9 + 7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector< vector< int>> dp(n,vector<int>(m));
	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			if(mat[i][j]== -1) dp[i][j]=0;
			else if(i==0 && j==0) dp[i][j]=1;
			else{
				int up=0, left=0;
				if(i>0)up = dp[i-1][j];
				if(j>0)left = dp[i][j-1];
				dp[i][j] = (up+left)%mod;
			}
		}
	}
	return dp[n-1][m-1];
}

_____________________________________________________
Space optimization - time: O(n) space: O(2m)
-----------------------------------------------------
int mod =(int)(1e9 + 7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector<int> prev(m);
	for(int i=0; i<n; i++){
		vector<int> cur(m,0);
		for(int j=0; j<m; j++){
			if(mat[i][j]== -1) cur[j]=0;
			else if(i==0 && j==0) cur[j]=1;
			else{
				int up=0, left=0;
				if(i>0)up = prev[j];
				if(j>0)left = cur[j-1];
				cur[j] = (up+left)%mod;
			}
		}
		prev = cur;
	}
	return prev[m-1];
}
