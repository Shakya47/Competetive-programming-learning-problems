Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

//Idea:
- Similar to unique grid path problem

____________________________________________
Recursion - time: O(2^m*n)
--------------------------------------------
int f(int i, int j, vector<vector<int>>& grid){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return 1e9;
        
        int up = grid[i][j] + f(i-1, j, grid);
        int left = grid[i][j] + f(i, j-1, grid);
        
        return min(up, left);

    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return f(m-1, n-1, grid);
    }
    
____________________________________________
Memoization - time: O(m*n)
--------------------------------------------
int f(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return 1e9;
        if(dp[i][j] != -1) return dp[i][j];
        
        int up = grid[i][j] + f(i-1, j, grid, dp);
        int left = grid[i][j] + f(i, j-1, grid, dp);
        
        return dp[i][j] = min(up, left);

    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return f(m-1, n-1, grid, dp);
    }
____________________________________________
Tabulation - time: O(m*n)
-------------------------------------------- 

int minPathSum(vector<vector<int>> &grid) {
        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(i==0 && j==0) dp[i][j] = grid[i][j];
                else{
                    int up = 1e9, left = 1e9;
                    if(i>0) up = grid[i][j] + dp[i-1][j];
                    if(j>0) left = grid[i][j] + dp[i][j-1];
                    dp[i][j] = min(up, left);
                }
                
            }
        }      
        return dp[m-1][n-1];
}

____________________________________________
Space optimization - time: O(m*n)
-------------------------------------------- 
 int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> prev(n,1e9);
        
        for(int i = 0; i<m; i++){
            vector<int> cur(n,1e9);
            for(int j = 0; j<n; j++){
                if(i==0 && j==0) cur[j] = grid[i][j];
                else{
                    int up = 1e9, left = 1e9;
                    if(i>0) up = grid[i][j] + prev[j];
                    if(j>0) left = grid[i][j] + cur[j-1];
                    cur[j] = min(up, left);
                }
            }
            prev = cur;
        }      
        return prev[n-1];
    }
