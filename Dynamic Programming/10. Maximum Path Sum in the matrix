You have been given an N*M matrix filled with integer numbers, 
find the maximum sum that can be obtained from a path starting from any cell in the first row to any cell in the last row.
From a cell in a row, you can move to another cell directly below that row, or diagonally below left or right. 
So from a particular cell (row, col), we can move in three directions i.e.

//Idea:
- here we have Variable starting point , variable ending point
- we will use top-down approach and starting point will be looped
- rest all are simple
____________________________________________
Recursion - time: O(3^m*n)
--------------------------------------------
int f(int i, int j, int n, vector<vector<int>> &matrix){
	if(j<0 || j>=n) return -1e8;
	if(i==0) return matrix[0][j];

	int up = matrix[i][j] + f(i-1,j,n,matrix);
	int dl = matrix[i][j] + f(i-1,j-1,n,matrix);
	int dr = matrix[i][j] + f(i-1,j+1,n,matrix);
	
	return max(up, max(dl, dr));
}
int getMaxPathSum(vector<vector<int>> &matrix)
{
	int m = matrix.size();
	int n = matrix[0].size();
    int maxi = -1e8;
	for(int j = 0; j<n; j++){
		maxi = max(maxi, f(m-1, j, n, matrix));
	}
	return maxi;
}
____________________________________________
Memoization - time: O(m*n)
--------------------------------------------
int f(int i, int j, int n, vector<vector<int>> &matrix, vector<vector<int>> &dp){
	if(j<0 || j>=n) return -1e8;
	if(i==0) return matrix[0][j];
	if(dp[i][j] != -1) return dp[i][j];
	int up = matrix[i][j] + f(i-1,j,n,matrix, dp);
	int dl = matrix[i][j] + f(i-1,j-1,n,matrix, dp);
	int dr = matrix[i][j] + f(i-1,j+1,n,matrix, dp);
	
	return dp[i][j] = max(up, max(dl, dr));
}
int getMaxPathSum(vector<vector<int>> &matrix)
{
	int m = matrix.size();
	int n = matrix[0].size();
    int maxi = -1e8;
	vector<vector<int>> dp(m,vector<int>(n, -1));
	for(int j = 0; j<n; j++){
		maxi = max(maxi, f(m-1, j, n, matrix, dp));
	}
	return maxi;
}

____________________________________________
Tabulation - time: O(m*n)
--------------------------------------------
int getMaxPathSum(vector<vector<int>> &matrix)
{
	int m = matrix.size();
	int n = matrix[0].size();

	vector<vector<int>> dp(m,vector<int>(n, 0));
	for(int j = 0; j<n; j++) dp[0][j] = matrix[0][j];	//base case
	
	for(int i = 1; i<m; i++){
		for(int j = 0; j<n; j++){
			int up = matrix[i][j] + dp[i-1][j];
			int dl = matrix[i][j];
			if(j-1>=0)  dl += dp[i-1][j-1];
			else dl += -1e8;
			int dr = matrix[i][j];
			if(j+1<n) dr += dp[i-1][j+1];
			else dr += -1e8;
			dp[i][j] = max(up, max(dl, dr));
		}
	}
	int maxi = -1e8;
	for(int j = 0; j<n; j++){
		maxi = max(maxi, dp[m-1][j]);
	}
	return maxi;
}

____________________________________________________________________________
JavaScript:
Recursion:
````````````
maximumPath(Matrix,m){
	let maxSum = 0;
	for(let j = 0; j<m; j++){
	    maxSum = Math.max(maxSum, this.rec(0, j, m-1, Matrix));
	}
	return maxSum;
}

rec(i, j, m, matrix){
	if(j < 0 || j > m){
	    return 0;
	}
	
	if(i === m){
	    return matrix[i][j];
	}
	
	let down = matrix[i][j] + this.rec(i+1, j, m, matrix);
	let leftDiag = matrix[i][j] + this.rec(i+1, j-1, m, matrix);
	let rightDiag = matrix[i][j] + this.rec(i+1, j+1, m, matrix);
	
	return Math.max(down, Math.max(leftDiag, rightDiag));
}

Memoization:
`````````````
maximumPath(Matrix,m){
	let maxSum = 0;
	let dp = Array.from({length: m}, () => Array.from({length: m}, () => -1));
	for(let j = 0; j<m; j++){
	    maxSum = Math.max(maxSum, this.rec(0, j, m-1, Matrix, dp));
	}
	return maxSum;
}

rec(i, j, m, matrix, dp){
	if(j < 0 || j > m){
	    return 0;
	}
	
	if(i === m){
	    return matrix[i][j];
	}
	
	if(dp[i][j] !== -1){
	    return dp[i][j];
	}
	
	let down = matrix[i][j] + this.rec(i+1, j, m, matrix, dp);
	let leftDiag = matrix[i][j] + this.rec(i+1, j-1, m, matrix, dp);
	let rightDiag = matrix[i][j] + this.rec(i+1, j+1, m, matrix, dp);
	
	return dp[i][j] = Math.max(down, Math.max(leftDiag, rightDiag));
}

Tabulation:
````````````
