You are given an array/list ‘ARR’ of ‘N’ positive integers and an integer ‘K’. 
Your task is to check if there exists a subset in ‘ARR’ with a sum equal to ‘K’.
Note: Return true if there exists a subset with sum equal to ‘K’. Otherwise, return false.

//Idea:
- concept of take and not take
- very simple approach
__________________________________________
Recursion - time: O(2^n)
------------------------------------------
bool f(int n, int k, vector<int> &arr ){
    if(k == 0) return true;
	if(n == 0) return (arr[0] == k);
	bool notTake = f(n-1, k, arr);
	bool take = false;
	if(k >= arr[n]){
		take = f(n-1, k-arr[n], arr);
	}
	return take | notTake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    return f(n-1, k, arr);
}


__________________________________________
Memoization - time: O(n*k)
------------------------------------------

bool f(int n, int k, vector<int> &arr, vector<vector<int>> &dp ){
    if(k == 0) return true;
	if(n == 0) return (arr[0] == k);
	if(dp[n][k] != -1) return dp[n][k];
	bool notTake = f(n-1, k, arr, dp);
	bool take = false;
	if(k >= arr[n]){
		take = f(n-1, k-arr[n], arr, dp);
	}
	return dp[n][k] = (take | notTake);
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
	vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return f(n-1, k, arr, dp);
}


___________________________________________
Tabulation - time: O(n*k)
-------------------------------------------
bool subsetSumToK(int n, int k, vector<int> &arr) {
	vector<vector<bool>> dp(n,vector<bool>(k+1,0));
    for(int i = 0; i<n; i++) dp[i][0] = true;
	dp[0][arr[0]] = true;
	
	for(int i = 1; i<n; i++){
		for(int j = 1; j<=k; j++){
			bool notTake = dp[i-1][j];
			bool take = false;
			if(j >= arr[i]){
				take = dp[i-1][j-arr[i]];
			}
			dp[i][j] = (take | notTake);
		}
	}
	return dp[n-1][k];
}

__________________________________________
Space Optimize - 
------------------------------------------
bool subsetSumToK(int n, int k, vector<int> &arr) {
	vector<bool>prev(k+1, 0);
	vector<bool>cur(k+1, 0);
	
    prev[0]=cur[0]=true;
	prev[arr[0]] = true;
	
	for(int i = 1; i<n; i++){
		for(int j = 1; j<=k; j++){
			bool notTake = prev[j];
			bool take = false;
			if(j >= arr[i]){
				take = prev[j-arr[i]];
			}
			cur[j] = (take | notTake);
		}
		prev = cur;
	}
	return prev[k];
}
