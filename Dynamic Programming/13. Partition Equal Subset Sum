Given a non-empty array nums containing only positive integers, 
find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.


//Its same as previous question, over here target sum would be (total sum of array)/2
//do the same optimization

bool f(int n, int k, vector<int>& nums, vector<vector<int>> &dp){
        if(k == 0) return true;
        if(n == 0){
            if(nums[n] == k) return true;
            else return false;
        }
        if(dp[n][k] != -1) return dp[n][k];
        bool notTake = f(n-1, k, nums, dp);
        bool take = false;
        if(k>=nums[n]){
            take = f(n-1, k-nums[n], nums, dp);
        }
        
        return dp[n][k] = notTake | take;
    
    }
bool canPartition(vector<int>& nums) {
    int n = nums.size();

    int sum = 0;
    for(int i = 0; i<n; i++){
        sum += nums[i];
    }
    if(sum%2 != 0) return false;
    else{
        vector<vector<int>> dp(n, vector<int>((sum/2)+1, -1));
        return f(nums.size()-1, sum/2, nums, dp);
    }
}
