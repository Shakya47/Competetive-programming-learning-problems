You are given an array containing N non-negative integers. 
Your task is to partition this array into two subsets such that the absolute difference between subset sums is minimum.
You just need to find the minimum absolute difference considering any valid division of the array elements.

//Concept of dp[n-1][j] 



int minSubsetSumDifference(vector<int>& nums, int n)
{
	
        int k = 0;
        for(int i = 0; i<n; i++){
            k += nums[i];
        }
        vector<vector<bool>> dp(n,vector<bool>(k+1, 0));
        
        for(int i = 0; i<n; i++) dp[i][0] = true;
        if(nums[0]<=k) dp[0][nums[0]] = true;
	
        for(int i = 1; i<n; i++){
            for(int j = 1; j<=k; j++){
                bool notTake = dp[i-1][j];
                bool take = false;
                if(nums[i]<=j) take = dp[i-1][j-nums[i]];
                dp[i][j] = take | notTake;
            }
        }
        
        int mini = 1e9;
        for(int j = 0; j<=k/2; j++){
            if(dp[n-1][j]==true)
                mini = min(mini, abs(k-j-j));
        }
        return mini;
}
