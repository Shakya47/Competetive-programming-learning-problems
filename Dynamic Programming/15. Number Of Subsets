You are given an array (0-based indexing) of positive integers and you have to tell how many different ways of selecting the elements from the array 
are there such that the sum of chosen elements is equal to the target number “tar”.

//Simple question of subset, to count we add the take & notTake 

___________________________________________
Recursion - time(2^n*tar)
-------------------------------------------
int f(int n, int tar, vector<int> &num){
	if(tar == 0) return 1;
	if(n == 0) return (num[n]==tar);
	
	int notTake = f(n-1, tar, num);
	int take = 0;
	if(num[n]<=tar) take = f(n-1, tar-num[n], num);
	return notTake + take;
}

int findWays(vector<int> &num, int tar)
{
	int n = num.size();
    return f(n-1, tar, num);
}

___________________________________________
Memoization - time(n*tar)
-------------------------------------------
int f(int n, int tar, vector<int> &num, vector<vector<int>> &dp){
	if(tar == 0) return 1;
	if(n == 0) return (num[n]==tar);
	
	if(dp[n][tar] != -1) return dp[n][tar];
	int notTake = f(n-1, tar, num, dp);
	int take = 0;
	if(num[n]<=tar) take = f(n-1, tar-num[n], num, dp);
	return dp[n][tar] = notTake + take;
}

int findWays(vector<int> &num, int tar)
{
	int n = num.size();
	vector<vector<int>>dp(n, vector<int>(tar+1, -1));
    return f(n-1, tar, num, dp);
}

_____________________________________________
Tabulation is similar
----------------------------------------------
