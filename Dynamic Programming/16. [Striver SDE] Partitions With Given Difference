Given an array ‘ARR’, partition it into two subsets (possibly empty) such that their union is the original array. 
Let the sum of the elements of these two subsets be ‘S1’ and ‘S2’.

Given a difference ‘D’, count the number of partitions in which ‘S1’ is greater than or equal to ‘S2’ and the difference between ‘S1’ and ‘S2’ is equal to ‘D’. 
Since the answer may be too large, return it modulo ‘10^9 + 7’.

//Idea:
- same as counting the number of subsets
- the difference can be modified to finding the sum = (totalSum - difference)/2;

int mod = 1e9 + 7;  //question says
int f(int n, int tar, vector<int> &num, vector<vector<int>>& dp) {
    if(n == 0){
        if(tar == 0 && num[0] == 0) return 2; //because taking and not taking results in 2 subsets
        if(tar == 0 || tar == num[0]) return 1;
        return 0;
    }
   
    if(dp[n][tar]!=-1) return dp[n][tar];
    int notTake = f(n-1, tar, num, dp);
    int take = 0;
    if(num[n]<=tar) take = f(n-1, tar-num[n], num, dp);
    return dp[n][tar] = (notTake + take)%mod;
}
    
int countPartitions(int n, int d, vector<int> &num) {
    int sum = accumulate(num.begin(), num.end(), 0);
    if(sum-d < 0 || (sum-d)%2 ) return false;
    vector<vector<int>>dp(n, vector<int>(((sum-d)/2)+1, -1));
    return f(n-1, (sum-d)/2, num, dp);
}
