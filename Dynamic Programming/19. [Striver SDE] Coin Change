You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

//Idea:
- take and notTake concept
- as we have infinite coins, we don't move to next coin

_____________________________
Recursion: O(2^n*amt)  TLE
-----------------------------
int f(int ind, int amt, vector<int>& coins){

    if(ind == 0){
        if(amt%coins[ind] == 0) return amt/coins[ind];
        return 1e9;
    }

    int notTake = 0 + f(ind - 1, amt, coins);
    int take = INT_MAX;
    if(coins[ind] <= amt ) take = 1 + f(ind, amt - coins[ind], coins) ;   //as we have infinite coins, we don't move to next coin

    return min(notTake, take);
}

int coinChange(vector<int>& coins, int amount) {

    if(amount == 0) return 0;
    int n = coins.size();
    int ans =  f(n-1, amount, coins);
    if(ans >= 1e9) return -1;
    return ans;

}


_____________________________
Memoization: O(2^n*amt)
-----------------------------
int f(int ind, int amt, vector<int>& coins, vector<vector<int>>& dp){

    if(ind == 0){
        if(amt%coins[ind] == 0) return amt/coins[ind];
        return 1e9;
    }
    if(dp[ind][amt] != -1) return dp[ind][amt];
    int notTake = 0 + f(ind - 1, amt, coins, dp);
    int take = INT_MAX;
    if(coins[ind] <= amt ) take = 1 + f(ind, amt - coins[ind], coins, dp) ;

    return dp[ind][amt] = min(notTake, take);
}

int coinChange(vector<int>& coins, int amount) {

    if(amount == 0) return 0;
    int n = coins.size();
    vector<vector<int>> dp(n, vector<int>(amount + 1, -1));
    int ans =  f(n-1, amount, coins, dp);
    if(ans >= 1e9) return -1;
    return ans;

}

_____________________________
Tabulation: O(n*amount)
-----------------------------
int coinChange(vector<int>& coins, int amount) {

    if(amount == 0) return 0;
    int n = coins.size();
    vector<vector<int>> dp(n, vector<int>(amount + 1, 0));

    for(int i = 0; i<=amount; i++){
        if(i%coins[0] == 0) dp[0][i] = i/coins[0];
        else dp[0][i] = 1e9;
    }

    for(int i = 1; i<n; i++){
        for(int j = 0; j<= amount; j++){
            int notTake = 0 + dp[i-1][j];
            int take = INT_MAX;
            if(coins[i] <= j ) take = 1 + dp[i][j - coins[i]];
            dp[i][j] = min(notTake, take);
        }
    }

    if(dp[n-1][amount] >= 1e9) return -1;
    return dp[n-1][amount]; 
}
