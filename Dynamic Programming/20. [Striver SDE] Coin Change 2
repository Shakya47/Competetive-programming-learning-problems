You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.

//Idea:
- same as previous coin change
- only change is base case, we return 1 if amount % coin[i] == 0 we return 1 and not amount/coin[i]

------------------------------
Memoization: O(2^n*amount)
------------------------------
int f(int ind, int amt, vector<int>& coins, vector<vector<int>>& dp){

    if(ind == 0){
        if(amt%coins[ind] == 0) return 1;
        return 0;
    }
    if(dp[ind][amt] != -1) return dp[ind][amt];

    int notTake = f(ind - 1, amt, coins, dp);
    int take = 0;
    if(coins[ind]<=amt) take = f(ind, amt - coins[ind], coins, dp);
    return dp[ind][amt] = notTake + take;
}
//driver code
int change(int amount, vector<int>& coins) {
    int n = coins.size();
    vector<vector<int>>dp (n, vector<int>(amount + 1, -1));
    return f(n-1, amount, coins, dp);

}

-----------------------------
Tabulation
-----------------------------
int change(int amount, vector<int>& coins) {
    int n = coins.size();
    vector<vector<int>>dp (n, vector<int>(amount + 1, 0));

    for(int i = 0; i<=amount; i++){
        if(i%coins[0] == 0) dp[0][i] = 1;
    }

    for(int i = 1; i<n; i++){
        for(int j = 0; j<= amount; j++){
            int notTake = dp[i-1][j];
            int take = 0;
            if(coins[i]<=j) take = dp[i][j - coins[i]];
            dp[i][j] = notTake + take;
        }
    }

    return dp[n-1][amount];

}
