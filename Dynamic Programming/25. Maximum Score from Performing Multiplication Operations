You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.
You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:
Choose one integer x from either the start or the end of the array nums.
  Add multipliers[i] * x to your score.
  Remove x from the array nums.
  Return the maximum score after performing m operations.

//Idea:
- We have 2 case either choose from left or right
- so we will make a DP with these 2 cases

int f(int ind, int left, int right, vector<int>& nums, vector<int>& mul, vector<vector<int>>& dp){

    if(ind == mul.size()) return 0;

    if(dp[ind][left] != INT_MIN) return dp[ind][left];

    int l = nums[left]*mul[ind] + f(ind+1, left+1, right, nums, mul, dp);
    int r = nums[right]*mul[ind] + f(ind+1, left, right-1, nums, mul,dp);

    return dp[ind][left] = max(l,r);
}
//driver code
int maximumScore(vector<int>& nums, vector<int>& multipliers) {   
    int n = nums.size();
    int m = multipliers.size();

    vector<vector<int>> dp(m, vector<int>(m, INT_MIN));
    return f(0, 0, n-1, nums, multipliers, dp);
}
