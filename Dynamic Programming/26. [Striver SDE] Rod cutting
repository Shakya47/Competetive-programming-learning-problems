Given a rod of length ‘N’ units. 
The rod can be cut into different sizes and each size has a cost associated with it. 
Determine the maximum cost obtained by cutting the rod and selling its pieces.

//Idea:
- Similar to Unbounded knapsack with unlimited suppy\
- here we used 0 based indexing to get the prices
-- index 0 = rod of length 1, price of lenght 1 = price[0]
-- index 1 = rod of length 2, price of lenght 2 = price[1]
...


--------------------------------------
Memoization:
--------------------------------------
int f(int ind, int n, vector<int> &price, vector<vector<int>>& dp){
    if(ind == 0) return price[0]*n;
    if(dp[ind][n] != -1) return dp[ind][n];
    
    int notTake = 0 + f(ind-1, n, price, dp);
    int take = INT_MIN;
    int rodLength = ind+1;    //as we are using 0 based indexing, 
    if(rodLength<=n) take = price[ind] + f(ind, n-rodLength, price, dp);
    
    return dp[ind][n] = max(notTake, take);
}
//driver code
int cutRod(vector<int> &price, int n)
{
    vector<vector<int>> dp(n, vector<int>(n+1, -1));
    return f(n-1, n, price, dp);
}

---------------------------------------
Tabulation
---------------------------------------

int cutRod(vector<int> &price, int n)
{
    vector<vector<int>> dp(n, vector<int>(n+1, 0));
    for(int i = 1; i<=n; i++){
        dp[0][i] = i* price[0];
    }
    
    for(int ind = 1; ind <n; ind++){
        for(int len = 1; len<=n; len++){
            int notTake = 0 + dp[ind-1][len];
            int take = INT_MIN;
            int rodLength = ind+1;
            if(rodLength<=len) take = price[ind] + dp[ind][len-rodLength];
            dp[ind][len] = max(notTake, take);
        }
    }
    
    return dp[n-1][n];
}

