Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

//Idea:
- same as Longest common subsequence
- make a new reverse string to compare the sequence

--------------------------
Memoization: O(2^n)
--------------------------
int f(int i, int j, string& s1, string& s2, vector<vector<int>>& dp){
    if(i<0 || j<0) return 0;

    if(dp[i][j] != -1) return dp[i][j];

    int notMatch = 0 + max(f(i-1, j, s1, s2, dp), f(i, j-1, s1, s2, dp));
    int match = 0;
    if(s1[i] == s2[j]) match = 1 + f(i-1, j-1, s1, s2, dp);

    return dp[i][j] = max(notMatch, match);
}
//driver code
int longestPalindromeSubseq(string s1) {
    string s2 = s1;
    reverse(s2.begin(), s2.end());
    int n = s1.length();

    vector<vector<int>> dp(n, vector<int>(n, -1));
    return f(n-1, n-1, s1, s2, dp);
}

----------------------------------
Tabulation: O(n*n)
----------------------------------
//use 1 based indexing to handle the -ve no. base case
int longestPalindromeSubseq(string s1) {
    string s2 = s1;
    reverse(s2.begin(), s2.end());
    int n = s1.length();
    if(n == 1) return 1;
    if(s1 == s2) return n;
    vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

    for(int i = 1; i<=n; i++)
        for(int j = 1; j<=n; j++){
            int notMatch = 0 + max(dp[i-1][j], dp[i][j-1]);
            int match = 0;
            if(s1[i-1] == s2[j-1]) match = 1 + dp[i-1][j-1];

            dp[i][j] = max(notMatch, match);
        }
    return dp[n][n];
}

----------------------------------
_________________________________________________________________________________________
JavaScript:
````````````
var longestPalindromeSubseq = function(s) {
    let n = s.length;
    let p = s.split('').reverse().join('');
    let dp = Array.from({length: n}, () => Array.from({length: n}, () => -1))
    return rec(n-1, n-1, s, p, dp);
};

function rec(i, j, s, p, dp){
    if(i<0 || j<0){
        return 0;
    }
    if(dp[i][j] !== -1) {
        return dp[i][j]
    }
    let take = 0;
    if(s[i] === p[j]){
        take = 1 + rec(i-1, j-1, s, p, dp);
    }
    let notTake = Math.max(rec(i-1, j, s, p, dp), rec(i, j-1, s, p, dp));
    return dp[i][j] = Math.max(take, notTake);
}
