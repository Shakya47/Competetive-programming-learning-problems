Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

//Idea:
- keep the longest palindromic subsequence intact 
- rest of the characters are to be added to the string
- string length - longset palindromic subsequence

-----------------------
Recursion:
-----------------------
int f(int ind1, int ind2, string& s1, string&s2){
    if(ind1 < 0 || ind2 < 0) return 0;

    int notMatch = 0 + max(f(ind1-1, ind2, s1, s2), f(ind1, ind2-1, s1,s2));
    int match = INT_MIN;
    if(s1[ind1] == s2[ind2]) match = 1 + f(ind1-1, ind2-1, s1, s2);

    return max(notMatch, match);
}
//driver code
int minInsertions(string s1) {
    string s2 = s1;
    reverse(s2.begin(), s2.end());
    int n = s1.length();

    return n - f(n-1, n-1, s1, s2);
}

----------------------
Tabulation:
----------------------
int minInsertions(string s1) {
    string s2 = s1;
    reverse(s2.begin(), s2.end());
    int n = s1.length();
    if(n == 1) return 0;
    if(s1 == s2) return 0;
    vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

    for(int i = 1; i<=n; i++)
        for(int j = 1; j<=n; j++){
            int notMatch = 0 + max(dp[i-1][j], dp[i][j-1]);
            int match = 0;
            if(s1[i-1] == s2[j-1]) match = 1 + dp[i-1][j-1];

            dp[i][j] = max(notMatch, match);
        }
    return n - dp[n][n];
  }

______________________________________________________________________
JavaScript:
````````````
var minInsertions = function(s) {
    let n = s.length;
    let p = s.split('').reverse().join('');
    let dp = Array.from({length: n}, () => Array.from({length: n}, () => -1));
    return n - rec(n-1, n-1, s, p, dp);
};

function rec(i, j, s, p, dp){
    if(i < 0 || j < 0){
        return 0;
    }

    let take = 0;
    if(s[i] === p[j]){
        take = 1 + rec(i-1, j-1, s, p, dp);
    }
    if(dp[i][j] !== -1){
        return dp[i][j]
    }

    let notTake = Math.max(rec(i-1, j, s, p, dp), rec(i, j-1, s, p, dp));
    return dp[i][j] = Math.max(take, notTake);
}
