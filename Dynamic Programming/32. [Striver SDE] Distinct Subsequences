Given two strings s and t, return the number of distinct subsequences of s which equals t.
A string's subsequence is a new string formed from the original string by deleting some (can be none) 
of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

The test cases are generated so that the answer fits on a 32-bit signed integer.

//Idea: 
- the is of notMatch and match
- we add both the possibilities

-------------------------------
Memoization: TLE
-------------------------------
int f(int i, int j, string s, string t, vector<vector<int>> dp){
    if(j<0) return 1; //as all the chars in t have been matched
    if(i<0) return 0; //there are still chars to be matched left

    if(dp[i][j] != -1) return dp[i][j];
    int notMatch = f(i-1, j, s, t, dp);
    int match = 0;
    if(s[i] == t[j]) match = f(i-1, j-1, s, t, dp);

    return dp[i][j] = notMatch + match;
}

//driver code
int numDistinct(string s, string t) {
    int n1 = s.length();
    int n2 = t.length();
    if(s == t) return 1;
    if(n1 == 1) return 0; 

    vector<vector<int>> dp(n1, vector<int>(n2, -1));
    return f(n1-1, n2-1, s, t, dp);
}

---------------------------
Tabulation:
---------------------------
//Use 1 based indexing due to -ve base case
// use double instead of int for integer overflow

int numDistinct(string s, string t) {
    int n1 = s.length();
    int n2 = t.length();
    if(s == t) return 1;
    if(n1 == 1) return 0; 

    vector<vector<double>> dp(n1+1, vector<double>(n2+1, 0));
    for(int i = 0; i<=n1; i++) dp[i][0] = 1;

    for(int i = 1; i <= n1; i++){
        for(int j = 1; j <= n2; j++){
            double notMatch = dp[i-1][j];
            double match = 0;
            if(s[i-1] == t[j-1]) match = dp[i-1][j-1];

            dp[i][j] = notMatch + match;
        }
    }
    return dp[n1][n2];
}
