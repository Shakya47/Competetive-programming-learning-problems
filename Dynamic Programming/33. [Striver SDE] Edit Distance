Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
  Insert a character
  Delete a character
  Replace a character
  
//Idea:
- it's same like match and notMatch, except we have to make it for insert, delete and replace
- base case is interesting
-- as i<0 or j<0 means we have exhausted the string, the only possible way to make it a string is my inserting
-- so i<0, we make j+1 insertion and vice versa for j<0

---------------------------
Memoization
---------------------------

int f(int i, int j, string word1, string word2, vector<vector<int>>& dp){

    if(j<0) return i+1;
    if(i<0) return j+1;
    if(dp[i][j] != -1) return dp[i][j];

    int insert = 1 + f(i, j-1, word1, word2, dp);
    int del = 1 + f(i-1, j, word1, word2, dp);
    int replace = 1 + f(i-1, j-1, word1, word2, dp);
    int match = INT_MAX;
    if(word1[i] == word2[j]) match = 0 + f(i-1, j-1, word1, word2, dp);

    return dp[i][j] = min(insert, min(del, min(replace, match)));
}
//driver code
int minDistance(string word1, string word2) {

    int n1 = word1.length();
    int n2 = word2.length();
    if(word1 == word2) return 0;
    vector<vector<int>> dp(n1, vector<int>(n2, -1));
    return f(n1-1, n2-1, word1, word2, dp);
}

---------------------------
Tabulation
---------------------------
//1- based indexing due to -ve base cases

int minDistance(string word1, string word2) {
    int n1 = word1.length();
    int n2 = word2.length();
    if(word1 == word2) return 0;
    vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));

    for(int i = 0; i<=n1; i++) dp[i][0] = i;
    for(int j = 0; j<=n2; j++) dp[0][j] = j;

    for(int i = 1; i<=n1; i++)
        for(int j = 1; j<=n2; j++){
            int insert = 1 + dp[i][j-1];
            int del = 1 + dp[i-1][j];
            int replace = 1 + dp[i-1][j-1];
            int match = INT_MAX;
            if(word1[i-1] == word2[j-1]) match = 0 + dp[i-1][j-1];

            dp[i][j] = min(insert, min(del, min(replace, match)));

        }

    return dp[n1][n2];
}
