Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
  '?' Matches any single character.
  '*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

//Idea:
- somewhat take and notTake
- base cases and conditions are tricky

---------------------------
Memoization: TLE
---------------------------
bool f(int i, int j, string s, string p, vector<vector<int>>dp){

    if(i<0 && j<0) return true; //both string exhausted
    if(i>=0 && j<0) return false;   //only pattern exhausted
    if(i<0 && j>=0){    //pattern remains
        for(int jj = 0; jj<= j; jj++)
            if(p[jj] != '*') return false;  //it can only fulfil condition if all pattern is *
        return true;
    }

    if(dp[i][j] != -1) return dp[i][j];

    if(s[i] == p[j] || p[j] == '?') return dp[i][j] = f(i-1, j-1, s, p, dp);

    if(p[j] == '*') return dp[i][j] = f(i-1, j, s, p, dp) | f(i, j-1, s, p, dp);  //check all possibilities of *

    return dp[i][j] = false;   //else return false
}
//driver code
bool isMatch(string s, string p) {
    int n1 = s.length();
    int n2 = p.length();
    vector<vector<int>>dp(n1, vector<int>(n2, -1));
    return f(n1-1, n2-1, s, p, dp);
}

-----------------------
Tabulation
-----------------------
bool isMatch(string s, string p) {
    int n1 = s.length();
    int n2 = p.length();
    vector<vector<int>>dp(n1+1, vector<int>(n2+1, 0));

    dp[0][0] = 1;
    for(int i = 1; i<=n1; i++) dp[i][0] = 0;

    bool flag = true;
    for(int j = 1; j<=n2; j++){
            if(p[j-1] != '*')   //if != then from j -> n2 will be false, hence flag used
                flag = false;    
            dp[0][j] = flag;
        }

    for(int i = 1; i<=n1; i++)
        for(int j = 1; j<=n2; j++){
            if(s[i-1] == p[j-1] || p[j-1] == '?') dp[i][j] = dp[i-1][j-1];
            else if(p[j-1] == '*') dp[i][j] = dp[i-1][j] | dp[i][j-1];
            else dp[i][j] = 0;
        }

    return dp[n1][n2];
}
