You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

//Idea:
- same like buy & sell II, while selling we have to make sure to increment ind by 2 and not by 1
- also be careful in base case due to ind+2

-------------------------
Memoization
-------------------------
int f(int ind, int buy, vector<int>& prices, vector<vector<int>> &dp, int n){
    if(ind >= n) return 0;

    if(dp[ind][buy] != -1) return dp[ind][buy];
    if(buy){
        return dp[ind][buy] = max(-prices[ind] + f(ind+1, 0, prices, dp,n), 
                                0 + f(ind+1, 1, prices, dp,n));
    }
    else{
        return dp[ind][buy] = max(prices[ind] + f(ind+2, 1, prices, dp,n),
                                0 + f(ind+1, 0, prices, dp,n));
    }
}
//driver code
int maxProfit(vector<int>& prices) {
    int n = prices.size();

    vector<vector<int>> dp(n, vector<int>(2, -1));
    return f(0, 1, prices, dp, n);
}

---------------------
Tabulation:
---------------------
int maxProfit(vector<int>& prices) {
    int n = prices.size();

    vector<vector<int>> dp(n+2, vector<int>(2, 0));

    for(int ind = n-1; ind>=0; ind--)
        for(int buy = 0; buy<2; buy++){
            if(buy){
                dp[ind][buy] = max(-prices[ind] + dp[ind+1][0], 
                                        0 + dp[ind+1][1]);
                }
            else{
                dp[ind][buy] = max(prices[ind] + dp[ind+2][1],
                                        0 + dp[ind+1][0]);
            }
        }

    return dp[0][1];
}
