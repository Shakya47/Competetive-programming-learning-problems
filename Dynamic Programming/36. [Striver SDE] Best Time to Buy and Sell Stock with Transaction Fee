You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

//Idea:
- same as buy and sell II, just deduct fee while selling

------------------
Memoization
------------------
int f(int ind, int buy, vector<int>& prices, vector<vector<int>> &dp, int n, int fee){
    if(ind >= n) return 0;

    if(dp[ind][buy] != -1) return dp[ind][buy];
    if(buy){
        return dp[ind][buy] = max(-prices[ind] + f(ind+1, 0, prices, dp,n, fee), 
                                0 + f(ind+1, 1, prices, dp,n, fee));
    }
    else{
        return dp[ind][buy] = max(prices[ind] - fee + f(ind+1, 1, prices, dp,n, fee), //deduct fee
                                0 + f(ind+1, 0, prices, dp,n, fee));
    }
}
//driver code
int maxProfit(vector<int>& prices, int fee) {
    int n = prices.size();

    vector<vector<int>> dp(n, vector<int>(2, -1));
    return f(0, 1, prices, dp, n, fee);
}


----------------
Tabulation
----------------
int maxProfit(vector<int>& prices, int fee) {
    int n = prices.size();

    vector<vector<int>> dp(n+1, vector<int>(2, 0));

    for(int ind = n-1; ind>=0; ind--)
        for(int buy = 0; buy <=1; buy++){
            if(buy){
                dp[ind][buy] = max(-prices[ind] + dp[ind+1][0], 
                                        0 + dp[ind+1][1]);
            }
            else{
                dp[ind][buy] = max(prices[ind] - fee + dp[ind+1][1],
                                        0 + dp[ind+1][0]);
            }                
        }

    return dp[0][1];
}
