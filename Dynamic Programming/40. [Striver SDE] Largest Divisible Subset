Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

//Idea:
- based on LIS printing
- we maintain a hash vector to store prev index
- we also maintain a variable for storing lastIndex of the subset, so it's easy to know which is the last element in the subset

vector<int> largestDivisibleSubset(vector<int>& nums) {
    int n = nums.size();

    vector<int> dp(n, 1);
    int maxi = 1;
    int lastIndex = 0;
    sort(nums.begin(), nums.end());

    vector<int> hash(n);

    for(int i = 0; i<n; i++){    
        hash[i] = i;
        for(int prev = 0; prev<i; prev++){
            if(nums[i] % nums[prev] == 0 && dp[i]< 1+dp[prev]){
                dp[i] = 1 + dp[prev];
                hash[i] = prev;
            }
        } 
        if(dp[i] > maxi){
            maxi = dp[i];
            lastIndex = i;
        }
    }

    vector<int> ans(maxi);
    int ind = 1;
    ans[0] = nums[lastIndex];
    while(hash[lastIndex] != lastIndex){
        lastIndex = hash[lastIndex];
        ans[ind] = nums[lastIndex];
        ind++;
    }

    reverse(ans.begin(), ans.end());

    return ans;
}
