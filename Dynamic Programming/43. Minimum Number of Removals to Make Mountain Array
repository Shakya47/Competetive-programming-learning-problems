You may recall that an array arr is a mountain array if and only if:

- arr.length >= 3
- There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
  -- arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
  -- arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.

//Idea:
- Concept of Bitonic
- here we have to make sure that moutain array increases and then decrease
-- not like bitonic where strictly increasing or decreasing were allowed
- to make sure of it, dp[i] should be > 1

int minimumMountainRemovals(vector<int>& arr) {
    int n = arr.size();

    vector<int>dp1(n,1);
    vector<int>dp2(n,1);

    for(int i = 0; i<n; i++)
        for(int prev = 0; prev < i; prev++){
            if(arr[i]>arr[prev] && dp1[i] < dp1[prev] + 1){
                dp1[i] = 1 + dp1[prev];
            }
        }

    for(int i = n-1; i>=0; i--)
        for(int prev = n-1; prev > i; prev--){
            if(arr[i]>arr[prev] && dp2[i] < dp2[prev] + 1){
                dp2[i] = 1 + dp2[prev];
            }
        }

    int ans = 1;
    for(int i = 0; i < n; i++){
        if(dp1[i]>1 && dp2[i]>1)
            ans = max(ans, dp1[i]+dp2[i]-1);
    }
    return n - ans;
}

 
