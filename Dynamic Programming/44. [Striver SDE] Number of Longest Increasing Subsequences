Given an integer array nums, return the number of longest increasing subsequences.
Notice that the sequence has to be strictly increasing.

//Idea:
- We use th LIS dp
- we make a count array which will have the count of LIS for each element


int findNumberOfLIS(vector<int>& nums) {
    int n = nums.size();
    int maxLen = 1;
    vector<int>dp(n,1), count(n,1);

    for(int i = 0; i < n; i++){
        for(int prev = 0; prev < i; prev++){
            if(nums[i]>nums[prev] && dp[i]< 1 + dp[prev]){
                dp[i] = 1 + dp[prev];
                count[i] = count[prev];
            }
            else if(nums[i] > nums[prev] && dp[i] == 1 + dp[prev]){
                count[i] += count[prev];
            }
        }
        maxLen = max(maxLen, dp[i]);
    }

    int ans = 0;
    for(int i = 0; i<n; i++)
        if(dp[i] == maxLen)
            ans += count[i];

    return ans;   
}
