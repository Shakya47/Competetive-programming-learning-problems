You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, 
then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

//Idea:
- we can't use previous method and solve each partition independently, since they depend on other partition
- to make it independent, we start from the only 1 balloon left for burst, which has cost = 1 * balloon1 * 1
- after this we take 2 balloon left, cost = 1 * balloon2 * balloon1  or balloon1 * balloon2 * 1


----------------------
Memoization
----------------------
int f(int i, int j, vector<int>& nums, vector<vector<int>>&dp){
    if(i>j) return 0;
    if(dp[i][j] != -1) return dp[i][j];
    int maxi = INT_MIN;
    for(int ind = i; ind<=j; ind++){
        int cost = nums[i-1]*nums[ind]*nums[j+1] + f(i, ind-1, nums, dp) + f(ind+1, j, nums, dp);
        maxi = max(cost, maxi);
    }
    return dp[i][j] = maxi;
} 
//driver code
int maxCoins(vector<int>& nums) {
    int n = nums.size();
    nums.push_back(1);
    nums.insert(nums.begin(), 1);
    vector<vector<int>>dp(n+1, vector<int>(n+1, -1));
    return f(1, n, nums, dp);
}

----------------------
Tabulation
----------------------
//make sure to put if(i>j) continue; in the loop or else start j from i
int maxCoins(vector<int>& nums) {
    int n = nums.size();
    nums.push_back(1);
    nums.insert(nums.begin(), 1);
    vector<vector<int>>dp(n+2, vector<int>(n+2, 0));

    for(int i = n; i>=1; i--){
        for(int j = 1; j<=n; j++){
            if(i>j) continue;
            int maxi = INT_MIN;
            for(int ind = i; ind<=j; ind++){
                int cost = nums[i-1]*nums[ind]*nums[j+1] + dp[i][ind-1]+ dp[ind+1][j];
                maxi = max(cost, maxi);
            }
            dp[i][j] = maxi;
        }
    }
    return dp[1][n];
}
