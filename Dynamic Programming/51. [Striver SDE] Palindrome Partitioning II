Given a string s, partition s such that every 
substring of the partition is a palindrome

Return the minimum cuts needed for a palindrome partitioning of s.


---------------------
Memoization
---------------------
bool isPalindrome(string &temp){
    int j = temp.length()-1;
    int i = 0;
    while(i<j){
        if(temp[i++] != temp[j--]) return 0;
    }        
    return 1;
}

int f(int i, int n, string &s, vector<int> &dp){
    if(i == n) return 0;

    if(dp[i] != -1) return dp[i];
    int ans = INT_MAX;
    string temp = "";
    for(int j = i; j<n; j++){
        temp += s[j];
        int cuts;
        if(isPalindrome(temp)){
            cuts = 1 + f(j+1, n, s, dp);
            ans = min(ans, cuts);
        }
    }
    return dp[i] = ans;
}

//driver code
int minCut(string s) {
    int n = s.length();
    vector<int> dp(n, -1);
    return f(0, n, s, dp) - 1;
}

--------------------
Tabulation
--------------------
 bool isPalindrome(string &temp){
    int j = temp.length()-1;
    int i = 0;
    while(i<j){
        if(temp[i++] != temp[j--]) return 0;
    }        
    return 1;
}

int minCut(string s) {
    int n = s.length();
    vector<int> dp(n+1, 0);

    for(int i = n-1; i>=0; i--){
        int ans = INT_MAX;
        string temp = "";
        for(int j = i; j<n; j++){
            temp += s[j];
            int cuts;
            if(isPalindrome(temp)){
                cuts = 1 + dp[j+1];
                ans = min(ans, cuts);
            }
        }
        dp[i] = ans;
    }
    return dp[0] - 1;
}
