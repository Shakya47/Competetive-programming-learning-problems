Given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph..

class Solution{
vector<int> res;
  public:
    void dfsrec(vector<int> adj[], int s, int *visited){
        visited[s]=1;
        res.push_back(s);
        for(int u : adj[s]){
            if(visited[u]==0){
                dfsrec(adj, u, visited);
            }
        }
    }
    
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        int visited[V] = {0};
        dfsrec(adj, 0, visited);
        return res;
    }
 }   

JavaScript:
//Make sure to use "this"
class Solution {
    
    constructor() {
        this.res = []
    }
    
    dfsRecursion(s, adj, visited) {
        visited[s] = 1;
        this.res.push(s);
        for(let i of adj[s]){
            if(visited[i] === 0){
                this.dfsRecursion(i, adj, visited);
            }
        }
    }
    
    dfsOfGraph(V, adj) {
        // code here
        let visited = Array(V).fill(0);
        this.dfsRecursion(0, adj, visited);
        return this.res;
    }
}
