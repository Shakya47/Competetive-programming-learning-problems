Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.

//Steps:
- will create an indegree array which stores indegree of each vertex
- we will only push in vector if the indegree of the vertex is zero, and also decrement the adjacent vertex's indegree


vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> res;
	    queue<int> q;
	    int indegree[V]={0};
	    for(int i = 0; i<V; i++){
	        for(int u : adj[i])
	            indegree[u]++;
	    }
	    for(int i = 0; i<V; i++){
	        if(indegree[i]==0)
	            q.push(i);
	    }
	    while(!q.empty()){
	        int u = q.front();
	        q.pop();
	        res.push_back(u);
	        for(int v: adj[u]){
	            indegree[v]--;
	            if(indegree[v]==0)
	                q.push(v);
	                
	        }
	    }
	    return res;
	}
