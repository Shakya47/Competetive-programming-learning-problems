You have been given an undirected graph with 'N' vertices and 'M' edges. The vertices are labelled from 1 to 'N'.
Your task is to find if the graph contains a cycle or not.
A path that starts from a given vertex and ends at the same vertex traversing the edges only once is called a cycle.

//Note: Edge matrix is given, so we need to convert it into adjancy list first.

bool isCycle(int i, int parent, vector<int>adj[], vector<int>&vis){
    vis[i] = 1;
    for(auto it: adj[i]){
        if(!vis[it]){
            if(isCycle(it, i, adj, vis)) return true;
        }
        else if(it != parent) return true;      
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int>vis(n+1, 0);
    vector<int>adj[n+1];
    for(int i = 0;i<m;i++){   //Converting to adjancy list
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    for(int i = 1; i<=n; i++){
        if(!vis[i]){
            if(isCycle(i,-1,adj,vis)) return "Yes";
        }
    }
    return "No";
}
