Adjacency list is given, check whether the graph is Bipartite or not.


//BFS Solution: 
bool isCheck(int i, vector<int>& vis, vector<vector<int>>& graph){
    queue<int> q;
    q.push(i);
    vis[i] = 1;
    while(!q.empty()){
        int node = q.front();
        q.pop();
        for(auto it : graph[node]){
            if(vis[it] == -1){
                vis[it] = 1 - vis[node];
                q.push(it);
            }
            else if(vis[it] == vis[node]) return false;
        }
    }
    return true;
}

bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int>vis(n, -1);

    for(int i = 0; i<n; i++){
        if(vis[i] == -1){
            if(!isCheck(i, vis, graph)) return false;
        }
    }
    return true;
}

```````````````````````````````````````````````````
//DFS Solution
bool isCheck(int i, vector<int>& vis, vector<vector<int>>& graph){
    if(vis[i] == -1) vis[i] = 1;

    for(auto it : graph[i]){
        if(vis[it] == -1){
            vis[it] = 1 - vis[i];
            if(!isCheck(it, vis, graph)) return false;
        }
        else if(vis[it] == vis[i]) return false;
    }
    return true;
}

bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int>vis(n, -1);

    for(int i = 0; i<n; i++){
        if(vis[i] == -1){
            if(!isCheck(i, vis, graph)) return false;
        }
    }
    return true;
}
