You are given a directed graph having ‘N’ nodes. A matrix ‘EDGES’ of size M x 2 is given which represents the ‘M’ edges 
such that there is an edge directed from node EDGES[i][0] to node EDGES[i][1].
Find whether the graph contains a cycle or not, return true if a cycle is present in the given directed graph else return false.


-------------------------
GFG - Adjacency List is given
//Idea
- use a pathVisisted array which tells whether the node is visited in a path or not
- after a successful visit of the node, reset the pathVisited array
- For cycle detection - if node is visited and pathVisited in also 1 then it's a cycle

bool dfs(int i, vector<int> adj[], int vis[], int pathVis[]){
    vis[i] = 1;
    pathVis[i] = 1;

    for(auto it : adj[i]){
        if(!vis[it]){
            if(dfs(it, adj, vis, pathVis)) return true;
        }
        else if(pathVis[it])
            return true;
    }

    pathVis[i] = 0;
    return false;
}

// Driver code
bool isCyclic(int V, vector<int> adj[]) {
    int vis[V] = {0};
    int pathVis[V] = {0};

    for(int i = 0; i<V; i++){
        if(!vis[i]){
            if(dfs(i, adj, vis, pathVis)) return true;
        }
    }
    return false;
}



--------------------------------------
Coding Ninja
//Note: as edge matrix is given, make an adjacecy list
//Very imp: since it's a directed graph edges will be pushed only once.

bool isCheck(int i, vector<int>adj[],  vector<int>&vis,  vector<int>&dfsvis){
    vis[i] = 1;
    dfsvis[i] = 1;
    
    for(auto it : adj[i]){
        if(!vis[it]){
            if(isCheck(it, adj, vis, dfsvis)) return true;
        }
        else if(dfsvis[it]) return true;
    }
    dfsvis[i] = 0;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
    vector<int>adj[n+1];
    for(int i = 0;i<edges.size();i++){   //Converting to adjancy list
        adj[edges[i].first].push_back(edges[i].second);   //only once they will be pushed
    }
    
    vector<int>vis(n+1,0);
    vector<int>dfsvis(n+1,0);   //very imp
    
    for(int i = 1; i<= n; i++){
        if(!vis[i]){
            if(isCheck(i,adj,vis,dfsvis)) return true;
        }
    }
    return false;
}
