Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

//Idea:
- Simple DFS or BFS can be done
- simply count all the disconnected components

 void dfs(int row, int col, vector<vector<char>>& grid){
    if(row<0 || row >= grid.size() || col<0 || col >= grid[0].size()) return;

    if(grid[row][col] == '2' || grid[row][col] == '0') return;

    grid[row][col] = '2';

    dfs(row+1, col, grid);
    dfs(row, col+1, grid);
    dfs(row-1, col, grid);
    dfs(row, col-1, grid);
}

int numIslands(vector<vector<char>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    int count = 0;

    for(int row = 0; row<n; row++){
        for(int col = 0; col<m; col++){
            if(grid[row][col] == '1'){
                count++;
                dfs(row,col,grid);
            }
        }
    }
    return count;
}
