You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

//Idea:
- we use BFS here because using BFS the oranges will be rotten at the same time

int orangesRotting(vector<vector<int>>& grid) {
    queue<pair<int,int>> q;
    int fresh = 0;
    for(int i = 0; i<grid.size(); i++){
        for(int j = 0; j<grid[0].size(); j++){
            if(grid[i][j] == 1) fresh++;
            if(grid[i][j] == 2) q.push({i,j});
        }
    }
    int ans = -1;
    vector<int> ds = {-1,0,1,0,-1};
    while(!q.empty()){
        int n = q.size();
        while(n--){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int i = 0; i<4; i++){
                int r = x +ds[i];
                int c = y +ds[i+1];
                if(r>=0 && r<grid.size() && c>=0 && c<grid[0].size() && grid[r][c] == 1){
                    grid[r][c] = 2;
                    fresh--;
                    q.push({r,c});
                }
            }
        }
        ans++;
    }
    if(fresh > 0) return -1;
    if(ans == -1) return 0;
    return ans;
}

______________________________________________________
JavaScript:
````````````
var orangesRotting = function(grid) {
    let queue = new Queue();
    let fresh = 0;
    let m = grid.length;
    let n = grid[0].length;

    for(let i = 0; i<m; i++){
        for(let j = 0; j<n; j++){
            if (grid[i][j] === 1) {
                fresh++;
            } else if (grid[i][j] === 2) {
                queue.push([i, j]);
            }
        }
    }

    let ds = [-1, 0, 1, 0, -1];
    let ans = -1;

    while(!queue.isEmpty()){
        let qSize = queue.size();
        while(qSize--){
            let fruit = queue.dequeue();
            let row = fruit[0];
            let col = fruit[1];
            for(let i = 0; i < 4; i++){
                let newRow = row + ds[i];
                let newCol = col + ds[i+1];
                if(newRow >= 0 && newCol >= 0 && newRow <m && newCol < n && grid[newRow][newCol] === 1){
                    grid[newRow][newCol] = 2;
                    fresh--;
                    queue.push([newRow, newCol]);
                }
            }
        }
        ans++;
    }

    if(fresh > 0) return -1;
    if(ans === -1) return 0;
    return ans;
};
