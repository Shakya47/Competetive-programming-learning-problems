Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

//Idea:
- do DFS from the borders as DFS will travel to all its connected neighbours
- mark them visited
- later, replace all the !visted and 'O' to X

void dfs(int row, int col, vector<vector<char>>& board, vector<vector<int>> &vis){
    vis[row][col] = 1;
    int n = board.size();
    int m = board[0].size();
    int delrow[] = {-1, 0, 1, 0};
    int delcol[] = {0, 1, 0, -1};

    for(int i = 0; i<4; i++){
        int nrow = row + delrow[i];
        int ncol = col + delcol[i];
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && board[nrow][ncol] == 'O' && !vis[nrow][ncol]){
            dfs(nrow, ncol, board, vis);
        }
    }
}

//driver code
void solve(vector<vector<char>>& board) {
    int n = board.size();
    int m = board[0].size();

    vector<vector<int>> vis(n, vector<int>(m, 0));

    for(int i = 0; i<m; i++){
        //first row
        if(!vis[0][i] && board[0][i] == 'O'){
            dfs(0, i, board, vis);
        }
        //last row
        if(!vis[n-1][i] && board[n-1][i] == 'O'){
            dfs(n-1, i, board, vis);
        }
    }
    for(int i = 0; i<n; i++){
        //first row
        if(!vis[i][0] && board[i][0] == 'O'){
            dfs(i, 0, board, vis);
        }
        //last row
        if(!vis[i][m-1] && board[i][m-1] == 'O'){
            dfs(i, m-1, board, vis);
        }
    }

    for(int i = 0; i<n; i++)
        for(int j = 0; j<m; j++){
            if(!vis[i][j] && board[i][j] == 'O')
                board[i][j] = 'X';
        }

}
