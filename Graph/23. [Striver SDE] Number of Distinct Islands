Given a boolean 2D matrix grid of size n * m. 
You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically) forms an island. 
Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).

//Idea:
- concept from number of islands
- to check if the islands are equal, we subtract the co-ordinates with the base value
-- Eg: island 1 = (0,0) (0,1)
       island 2 = (5,0) (5,1) -> subtract it from the base i.e. 5,0
                = (5,0) - (5,0) , (5,1) - (5,0)
                = (0,0), (0,1)
- Put these into a set and return the size of the set


void dfs(int row, int col, vector<vector<int>>& grid, vector<vector<int>>& vis, vector<pair<int,int>>& vec, int row0, int col0){
    vis[row][col] = 1;
    vec.push_back({row-row0, col-col0});

    int n = grid.size();
    int m = grid[0].size();

    int delrow[] = {-1,0,1,0};
    int delcol[] = {0,1,0,-1};

    for(int i = 0; i<4; i++){
        int nrow = row + delrow[i];
        int ncol = col + delcol[i];
        if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol] == 1){
            dfs(nrow, ncol, grid, vis, vec, row0, col0);
        }
    }
}

//driver code
int countDistinctIslands(vector<vector<int>>& grid) {
    // code here
    int n = grid.size();
    int m = grid[0].size();

    vector<vector<int>>vis(n, vector<int>(m, 0));
    set<vector<pair<int,int>>> st;
    for(int i = 0; i<n; i++)
        for(int j = 0; j<m; j++){
            if(grid[i][j] == 1 && !vis[i][j]){
                vector<pair<int,int>> vec;
                dfs(i,j, grid, vis, vec, i, j);
                st.insert(vec);
            }
        }
    return st.size();    
}
