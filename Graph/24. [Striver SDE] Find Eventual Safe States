There is a directed graph of n nodes with each node labeled from 0 to n - 1. 
The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, 
meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. 
A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

//Idea:
- Use the Cycle detection Directed graph concept of using pathVisited
- have a isSafe[] which contains the safe nodes


bool dfs(int i, vector<vector<int>>& graph, vector<int>& vis, vector<int>& pathVis, vector<int>& isSafe){
    vis[i] = 1;
    pathVis[i] = 1;

    for(auto it: graph[i]){
        if(!vis[it]){
            if(dfs(it, graph, vis, pathVis, isSafe)) return true;
        }
        else if(pathVis[it]) return true;
    }

    pathVis[i] = 0;
    isSafe[i] = 1;
    return false;
}

//driver code
vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
    int n = graph.size();

    vector<int> vis(n, 0);
    vector<int> pathVis(n, 0);
    vector<int> isSafe(n, 0);
    vector<int> safeNodes;

    for(int i = 0; i<n; i++){
        if(!vis[i]){
            dfs(i, graph, vis, pathVis, isSafe);
        }
    }

    for(int i = 0; i<n; i++){
        if(isSafe[i])
            safeNodes.push_back(i);
    }

    sort(safeNodes.begin(), safeNodes.end());

    return safeNodes;
}
