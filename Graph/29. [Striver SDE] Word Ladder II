A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
- Every adjacent pair of words differs by a single letter.
- Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
- sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, 
or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].


//Idea:
- Concept is same as Word Ladder I
- we have to focus on when to st.erase() as the same word might be used by the other sequence


vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& wordList) {

    queue<vector<string>> q;
    unordered_set<string> st(wordList.begin(), wordList.end());
    vector<string> wordUsedOnLevel;
    vector<vector<string>> ans;

    q.push({beginWord});
    st.erase(beginWord);

    int level = 0;

    while(!q.empty()){
        vector<string> qWords = q.front();
        q.pop();
        string word = qWords.back();

        if(level < qWords.size()){
            level++;
            for(auto it: wordUsedOnLevel){
                st.erase(it);
            }
            wordUsedOnLevel.clear();
        }

        if(word == endWord){
            if(ans.size() == 0){
                ans.push_back(qWords);
            }
            else if(ans[0].size() == qWords.size()){
                ans.push_back(qWords);
            }
        }

        for(int i = 0; i<word.size(); i++){
            string originalWord = word;
            for(char ch = 'a'; ch <= 'z'; ch++){
                word[i] = ch;
                if(st.find(word) != st.end()){
                     qWords.push_back(word);
                     q.push(qWords);
                     qWords.pop_back();
                     wordUsedOnLevel.push_back(word);
                }
            }
            word = originalWord;
        }
    }
    return ans;
}
