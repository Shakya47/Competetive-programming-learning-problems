There are n cities connected by some number of flights. 
You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.
You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

//Idea:
- Use dijkstra, but we used to put {dist,node} in queue, here we can't do that as it will give the shortest distance but with more stops
- so make the queue as {stops, node, dist}
- priority queue is not needed as we are pushing stops + 1 each time, so it is already ascending
- don't check whether destination is reached, just keep the stops <= k

int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
    vector<int>dist(n, 1e9);
    vector<vector<pair<int,int>>>adj(n);
    queue<pair<int, pair<int,int>>>q;   // {stop, node, dist}
    dist[src] = 0;
    q.push({0, {src, 0}});

    for(auto it: flights){
        int u = it[0];
        int v = it[1];
        int wt = it[2];
        adj[u].push_back({v, wt});
    }

    while(!q.empty()){
        int node = q.front().second.first;
        int stops = q.front().first;
        int wt = q.front().second.second;
        q.pop();
        for(auto it : adj[node]){
            int adjNode = it.first;
            int edgWt = it.second;
            if(wt + edgWt < dist[adjNode] && stops<=k){
                dist[adjNode] = wt + edgWt;
                q.push({stops+1, {adjNode, dist[adjNode]}});
            }
        }
    }

    return (dist[dst] == 1e9) ? -1 : dist[dst];
}
