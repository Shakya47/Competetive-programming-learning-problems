You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] 
represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) 
(i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

//Idea:
- use dijsktra's algo
- use min-heap as each time we will store the mineffort in it
- minEffort = min(effort, dist[newi][newj])
-- effort = max(abs(height[i][j] - heights[newi][newj], currentDIff))

int minimumEffortPath(vector<vector<int>>& heights) {
    int n = heights.size();
    int m = heights[0].size();
    vector<vector<int>>dist(n, vector<int>(m,1e9));
    priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> pq;
    pq.push({0,{0,0}}); //{maxDifference, row, col}
    dist[0][0] = 0;


    int delR[] = {-1, 0, 1, 0};
    int delC[] = {0, 1, 0, -1};

    while(!pq.empty()){
        int diff = pq.top().first;
        int row = pq.top().second.first;
        int col = pq.top().second.second;
        pq.pop();
        if(row == n-1 && col == m-1) return diff;   //beause we are using min-heap, so the minimum effort will be here
        for(int i = 0; i<4; i++){
            int newR = row + delR[i];
            int newC = col + delC[i];
            if(newR>=0 && newC>=0 && newR<n && newC<m){
                int effort = max(abs(heights[row][col] - heights[newR][newC]), diff);
                if(effort < dist[newR][newC]){
                    dist[newR][newC] = effort;
                    pq.push({effort, {newR, newC}});
                }
            }

        }
    }
    return 0;
}
