Given start, end and an array arr of n numbers. 
At each step, start is multiplied with any number in the array and then mod operation with 100000 is done to get the new start.
Your task is to find the minimum steps in which end can be achieved starting from start. If it is not possible to reach end, then return -1.

//Idea:
- Usually shortest distance and these kind of questions with restricted number of nodes, can be solved using the standard bfs or djikstra
- If the problem is "path dependent" and is asking for the shortest path/route then thinking of DP is wrong!
- apply dijkstra's algo
- it's important how the dist[] is created

int minimumMultiplications(vector<int>& arr, int start, int end) {

    queue<pair<int,int>>q;  //{steps, product}
    vector<int>dist(100000, 1e9);
    q.push({0, start});
    dist[start] = 0;
    int mod = 100000;
    while(!q.empty()){
        int product = q.front().second;
        int steps = q.front().first;
        q.pop();
        for(int i = 0; i<arr.size(); i++){
            int newProduct = (product * arr[i]) % mod;
            if(steps + 1 < dist[newProduct]){
                dist[newProduct] = steps + 1;
                if(newProduct == end) return steps + 1;
                q.push({steps + 1, newProduct});
            }
        }
    }
    return -1;

}
