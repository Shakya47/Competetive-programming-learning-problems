You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. 
The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means 
that there is a road between intersections ui and vi that takes timei minutes to travel. 
You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.

//Idea:
- use dijkstra's algo
- here not the minimum time but the no. of paths reaching end node in minimum time is required
- use a ways[] to store the number of ways of reaching that node in minimum distance

int countPaths(int n, vector<vector<int>>& roads) {
    vector<vector<pair<long long,long long>>> adj(n);
    priority_queue<pair<long long,long long>, vector<pair<long long,long long>>, greater<pair<long long,long long>>> pq;//{dist, node}
    vector<long long>dist(n, 1e18);
    vector<long long>ways(n, 0); //number of ways to reach a node
    pq.push({0, 0});
    dist[0] = 0;
    ways[0] = 1;
    int mod = 1e9 + 7;
    for(auto it: roads){
        adj[it[0]].push_back({it[1], it[2]});
        adj[it[1]].push_back({it[0], it[2]});
    }

    while(!pq.empty()){
        long long node = pq.top().second;
        long long wt = pq.top().first;
        pq.pop();
        for(auto it: adj[node]){
            long long adjNode = it.first;
            long long edgWt = it.second;
            if(wt + edgWt < dist[adjNode]){
                dist[adjNode] = wt + edgWt;
                pq.push({dist[adjNode], adjNode});
                ways[adjNode] = ways[node];
            }
            else if(wt + edgWt == dist[adjNode]){
                ways[adjNode] = (ways[adjNode] + ways[node]) % mod;
            }
        }
    }

    return ways[n-1] % mod;
}
