Given a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S.
Note: If the Graph contains a negative cycle then return an array consisting of only -1.

//Idea:
- Bellman Ford Algo
-- Similar to Dijsktra's algo but is useful in -ve edges and detect -ve cycles
-- it iterates n-1 time to relax the dist[] - all the shortest distance will come
-- if on the nth time the dist[] gets further relaxed, then it has a -ve cycle

vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
    vector<int>dist(V, 1e8);
    dist[S] = 0;
    for(int i = 0; i<V-1; i++){
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] + wt < dist[v]){
                dist[v] = dist[u] + wt;
            }
        }
    }

    for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] + wt < dist[v]){
                return {-1};
            }
    }
    return dist;
}
