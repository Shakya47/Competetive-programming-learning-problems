The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. 
The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, 
it means there is no edge from i to j.
Do it in-place.

//Idea-
- Floyd Warshall algo
-- useful for same Bellman ford algo and also for finding shortest path for multisource nodes
-- we can find -ve cycle if any of the diagonal is -ve

void shortest_distance(vector<vector<int>>&matrix){
    int n = matrix.size();

    //make -1 to 1e9 and i==j=0
    for(int i = 0; i<n; i++){
        for(int j = 0; j<n; j++){
            if(matrix[i][j] == -1){
                matrix[i][j] = 1e9;
            }
            if(i == j) matrix[i][j] = 0;
        }
    }
//this is main algo
    for(int via = 0; via<n; via++){
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                matrix[i][j] = min(matrix[i][j], matrix[i][via] + matrix[via][j]);
            }
        }
    }


    //make 1e9 to -1 and i==j=0
    for(int i = 0; i<n; i++){
        for(int j = 0; j<n; j++){
            if(matrix[i][j] == 1e9){
                matrix[i][j] = -1;
            }
        }
    }
}
