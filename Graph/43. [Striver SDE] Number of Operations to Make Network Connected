There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where 
connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.
You are given an initial computer network connections. You can extract certain cables between two directly connected computers, 
and place them between any pair of disconnected computers to make them directly connected.
Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

//Idea:
- Use disjoint set
- we have to find extraEdges, and ans = numberOfComponents - 1
-- to find extraEdges we check whether both the nodes have same parent, this means they are already connected
-- to find numberOfComponents we traverse parent[] and check parent[i] == i


int makeConnected(int n, vector<vector<int>>& connections) {
    DisjointSet ds(n);
    int extraEdges = 0;
    for(auto it : connections){
        if(ds.findUPar(it[0]) == ds.findUPar(it[1])){
            extraEdges++;
        }
        else{
            ds.unionByRank(it[0], it[1]);
        }
    }

    int numberOfComps = 0;
    for(int i = 0; i<n; i++){
        if(ds.parent[i] == i){
            numberOfComps++;
        }
    }

    int ans = numberOfComps - 1;
    if(ans <=extraEdges){
        return ans;
    }
    return -1;
}
