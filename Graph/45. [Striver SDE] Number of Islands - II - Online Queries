You are given a n,m which means the row and column of the 2D matrix and an array of  size k denoting the number of operations. 
Matrix elements is 0 if there is water or 1 if there is land. Originally, the 2D matrix is all 0 which means there is no land in the matrix. 
The array has k operator(s) and each operator has two integer A[i][0], A[i][1] means that you can change the cell matrix[A[i][0]][A[i][1]] from sea to island. 
Return how many island are there in the matrix after each operation.You need to return an array of size k.
Note : An island means group of 1s such that they share a common side.

//Idea:
- have a vis array
- when new node comes, do count++
- check the adjNodes, 
-- if they don't share the same parent, union them and do count--

vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
    // code here
    DisjointSet ds(n*m);
    vector<int>ans;
    int count = 0;
    vector<vector<int>>vis(n, vector<int>(m, 0));

    for(auto it: operators){
        int row = it[0];
        int col = it[1];

        if(vis[row][col]){
            ans.push_back(count);
            continue;
        }
        vis[row][col] = 1;
        count++;

        int dr[] = {-1, 0, 1, 0};
        int dc[] = {0, 1, 0, -1};

        for(int i = 0; i<4; i++){
            int adjR = row + dr[i];
            int adjC = col + dc[i];
            if(adjR>=0 && adjC>=0 && adjR<n && adjC<m){
                if(vis[adjR][adjC]){
                    int node = row*m + col;
                    int adjNode = adjR*m + adjC;
                    if(ds.findUPar(node) != ds.findUPar(adjNode)){
                        ds.unionByRank(node, adjNode);
                        count--;
                    }
                }
            }
        }
        ans.push_back(count);
    }
    return ans;
}
