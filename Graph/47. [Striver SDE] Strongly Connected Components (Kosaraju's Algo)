Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, Find the number of strongly connected components in the graph.

//Idea:
- put the nodes in the stack in order of their time of their visit
- reverse the adj node direction
- do dfs and find scc

void dfs(int node, vector<int>& vis, vector<int> adj[], stack<int>& st){
    vis[node] = 1;
    for(auto it: adj[node]){
        if(!vis[it]){
            dfs(it, vis, adj, st);
        }
    }
    st.push(node);
}

void dfs2(int node, vector<int>& vis, vector<int> adjT[]){
    vis[node] = 1;
    for(auto it: adjT[node]){
        if(!vis[it]){
            dfs2(it, vis, adjT);
        }
    }
}

//driver code
int kosaraju(int V, vector<int> adj[])
{
    vector<int> vis(V, 0);
    stack<int>st;

    for(int i = 0; i<V; i++){
        if(!vis[i]){
            dfs(i, vis, adj, st);
        }
    }

    vector<int>adjT[V];
    for(int i = 0; i<V; i++){
        vis[i] = 0;
        for(auto it: adj[i]){
            adjT[it].push_back(i);
        }
    }

    int scc = 0;
    while(!st.empty()){
        int i = st.top();
        st.pop();
        if(!vis[i]){
            scc++;
            dfs2(i, vis, adjT);
        }
    }
    return scc;
}
