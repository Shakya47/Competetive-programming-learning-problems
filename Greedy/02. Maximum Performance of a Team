You are given two integers n and k and two integer arrays speed and efficiency both of length n. 
There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.
Choose at most k different engineers out of the n engineers to form a team with the maximum performance.
The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.
Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.

//Idea:
- create a vector of pair of efficiency & speed
- sort it in descending order so that efficiency is decreasing and no need to check the min
- use min-heap for storing speed, if size of min head > k, remove the top element as it will have the least speed


int MOD = 1e9 + 7;
int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {

    vector<pair<int,int>>candidates(n);

    for(int i = 0; i<n; i++)
        candidates[i] = {efficiency[i], speed[i]};

    sort(candidates.rbegin(), candidates.rend());

    long long ans = 0, speedSum = 0;

    priority_queue<int, vector<int>, greater<int>> pq;

    for(auto [e, s] : candidates){
        pq.push(s);
        speedSum += s;

        if(pq.size()>k){
            speedSum -= pq.top();
            pq.pop();
        }

        ans = max(ans, speedSum * e);
    }

    return ans % MOD;

}
