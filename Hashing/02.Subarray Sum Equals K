Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

Input: nums = [1,1,1], k = 2
Output: 2

Input: nums = [1,2,3], k = 3
Output: 2



//Hint: Prefix sum and Hashmap, Very Tricky

int subarraySum(vector<int>& a, int k) {
        int n = a.size();
        unordered_map<int,int> mp;
        int count = 0;
        int psum = 0;
        for(int i=0; i<n; i++){
            psum += a[i];
            if(psum==k)count++;
            if(mp.find(psum-k)!=mp.end())       //find if the psum - k is present or not in the map
                count += mp[psum-k];            //get the occurrence of that in count
            mp[psum]++;         //increment the occurence of psum in map
                          
        }
        return count;
    }


JavaScript:
var subarraySum = function(nums, k) {
    const map = new Map();
    let pSum = 0;
    let count = 0;
    // map.set(0,1);
    for(let i = 0; i<nums.length; i++){
        pSum += nums[i];
        if(pSum == k) count++;
        if(map.has(pSum - k)){
            count += map.get(pSum - k);
        }
        map.set(pSum, (map.get(pSum) || 0) + 1);

    }
    return count;
};
