//Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

//Input: nums = [100,4,200,1,3,2]
//Output: 4

//Idea:
- Store everything in unordered_set
- find the smallest number or the number whose -1 does not exist
- increment the cur=1 has we found something,
- do a while loop to check whether the elements greated that the number exists or not - this has to be done in a +1 increment

int longestConsecutive(vector<int>& a) {
        unordered_set<int> h;
        int res = 0;
        int curr = 0;
        for(int i = 0; i<a.size(); i++)
            h.insert(a[i]);
        for(int i=0; i<a.size(); i++){
            if(h.find(a[i]-1)==h.end()){
                curr=1;
                while(h.find(a[i]+curr)!=h.end())
                    curr++;
                res = max(res, curr);
            }
            
            curr=0;     
        }
        return res;
    }

JavaScript:
var longestConsecutive = function(nums) {
    let res = 0;
    let cur = 0;
    let set = new Set();

    for(let i = 0; i<nums.length; i++){
        set.add(nums[i]);
    }

    if(set.size <= 1) return set.size;

    for(let i = 0; i<nums.length; i++){
        if(!set.has(nums[i] - 1)){
            cur = 1;
            while(set.has(nums[i] + cur)){
                cur++;
            }
            res = Math.max(res, cur);
        }
        cur = 0;
    }

    return res;
};
