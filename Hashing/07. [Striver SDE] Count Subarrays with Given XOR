Given an array of integers ‘ARR’ and an integer ‘X’, you are supposed to find the number of subarrays of 'ARR' which have bitwise XOR of the elements equal to 'X'.

//Idea:
- based on prefix, similar to previous problem

  xorr = 2
 +--------+
 4  2  2  6  4
 +  +-----+
 !   xorr = 6
 xorr ^ x = 4, which already exists in map, so count += map[4]

int subarraysXor(vector<int> &arr, int x)
{
    int count = 0;
    int xorr = 0;
    unordered_map<int,int> mp;
    for(int  i = 0; i < arr.size(); i++){
        xorr = xorr ^ arr[i];
        if(xorr == x) count++;
        if(mp.find(xorr^x) != mp.end()) count += mp[xorr^x];
        mp[xorr] += 1;
    }
    return count;
}
