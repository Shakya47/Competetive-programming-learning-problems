A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)

You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.

Implement the MyCalendarThree class:
- MyCalendarThree() Initializes the object.
- int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.

//Idea:
- sweep algo - have a map, startTime with +1 and endTime with -1
- to check active events, sort this map based on key, and add its value to a counter
- maintain a max so that even if -ve value comes, we know the max event


 map<int,int> mp;
    int maxCount = 0;
    
    MyCalendarThree() {
        
    }
    
    int book(int start, int end) {
        mp[start]++;
        mp[end]--;
        
        int count = 0;
        for(auto it : mp){
            count += it.second;
            maxCount = max(count, maxCount);
        }
        return maxCount;
        
    }
};

-------------------------------------
Javascript:
-----------------------------------------
var MyCalendarThree = function () {
    this.timeline = new Map();
};

MyCalendarThree.prototype.book = function (startTime, endTime) {
    this.timeline.set(startTime, (this.timeline.get(startTime) || 0) + 1);
    this.timeline.set(endTime, (this.timeline.get(endTime) || 0) - 1);

    let events = 0;
    let maxEvents = 0;
    for(let time of [...this.timeline.keys()].sort((a,b) => a - b)) {
        events += this.timeline.get(time);
        maxEvents = Math.max(events, maxEvents);
    }
    return maxEvents;

};
