A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)

You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.

Implement the MyCalendarThree class:
- MyCalendarThree() Initializes the object.
- int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.

//Idea:
- create a map with time as key
- increment the value if the show starts
- decrement the value if the show ends



 map<int,int> mp;
    int maxCount = 0;
    
    MyCalendarThree() {
        
    }
    
    int book(int start, int end) {
        mp[start]++;
        mp[end]--;
        
        int count = 0;
        for(auto it : mp){
            count += it.second;
            maxCount = max(count, maxCount);
        }
        return maxCount;
        
    }
};
