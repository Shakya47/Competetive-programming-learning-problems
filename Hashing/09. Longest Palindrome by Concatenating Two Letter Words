You are given an array of strings words. Each element of words consists of two lowercase English letters.
Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.
Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.
A palindrome is a string that reads the same forward and backward.

//Idea:
- before storing the string and its freq in map, check if it's reverse already exists
-- if it exists, decrement the count of the already present string freq & if the count is 0 erase it from map
-- increment the ans += 4
- later again traverse the map to look for symmetric string eg: "aa", "bb", etc.
-- there can be only one such string in the ans, hence when found, ans += 2 and break from loop


 int longestPalindrome(vector<string>& words) {
    map<string,int>mp;
    long long ans=0;
    for(string x:words){
        string y=x;
        reverse(y.begin(),y.end());
        if(mp.find(y)!=mp.end()){
            ans+=4;
            mp[y]--;
            if(mp[y]==0){
                mp.erase(y);
            }

        }else{
            mp[x]++;
        }
    }
    for(auto x:mp){     //to check for symmetric strings
        if(x.first[0]==x.first[1]){
            ans+=2;
            break;
        }
    }
    return ans;
}

------------------------------------------------------
Javascript:
--------------------------------------------------------
var longestPalindrome = function(words) {
    let map = new Map();
    let count = 0;
    
    for(let word of words) {
        let reverseWord = word.split("").reverse().join("")
        if(map.has(reverseWord)) {
            map.set(reverseWord, map.get(reverseWord) - 1);
            count += 4;
            if(map.get(reverseWord) === 0) {
                map.delete(reverseWord);
            }
        } else {
            map.set(word, (map.get(word) || 0) + 1)
        }
    }

    for(let [k, v] of map) { //only one symmetric string can be there
        if(k[0] === k[1]) {
            count += 2;
            break;
        }
    }
    return count;
};
