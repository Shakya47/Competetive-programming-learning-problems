Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

//Idea:
- have 2 hashmaps
- two pointer like approach

string minWindow(string s, string t) {
        unordered_map<char,int> map1;
        unordered_map<char,int> map2;
        int check=INT_MAX;
        string result;
        for(char &ch:t)map1[ch]++;
        int slow=0,fast=0,lettercounter=0;
        for(;fast<s.length();fast++)
        {
            char ch=s[fast];
            if(map1.find(ch)!=map1.end())
            {
                map2[ch]++;
            if(map2[ch]<=map1[ch])
                lettercounter++;
            }
            if(lettercounter>=t.length())
            {
                while(map1.find(s[slow])==map1.end()||map2[s[slow]]>map1[s[slow]])
                {
                    map2[s[slow]]--;
                    slow++;
                }
                if(fast-slow+1<check)
                {
                    check=fast-slow+1;
                    result=s.substr(slow,check);
                }
            }
        }
        return result;
    }
