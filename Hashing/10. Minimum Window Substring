Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

//Idea:
- have 2 hashmaps
- two pointer like approach

string minWindow(string s, string t) {
        unordered_map<char,int> map1;
        unordered_map<char,int> map2;
        int check=INT_MAX;
        string result;
        for(char &ch:t)map1[ch]++;
        int slow=0,fast=0,lettercounter=0;
        for(;fast<s.length();fast++)
        {
            char ch=s[fast];
            if(map1.find(ch)!=map1.end())
            {
                map2[ch]++;
            if(map2[ch]<=map1[ch])
                lettercounter++;
            }
            if(lettercounter>=t.length())
            {
                while(map1.find(s[slow])==map1.end()||map2[s[slow]]>map1[s[slow]])
                {
                    map2[s[slow]]--;
                    slow++;
                }
                if(fast-slow+1<check)
                {
                    check=fast-slow+1;
                    result=s.substr(slow,check);
                }
            }
        }
        return result;
    }
-------------------------------------------------------------
Javascript: Based on template in sliding window for substring
-------------------------------------------------------------
var minWindow = function (s, t) {
    let winMap = new Map();
    let subMap = new Map();

    let have = 0, need = 0;
    let start = 0, end = 0;
    let resLen = Infinity;
    let res = [-1, -1];

    for (let c of t) {
        subMap.set(c, (subMap.get(c) || 0) + 1);
    }
    need = subMap.size;

    while (end < s.length) {
        if (subMap.has(s[end])) {
            winMap.set(s[end], (winMap.get(s[end]) || 0) + 1);
        }
        if (subMap.has(s[end]) && subMap.get(s[end]) === winMap.get(s[end])) {
            have++;
        }

        while (have === need) {
            if(resLen > end - start + 1) {
                resLen = end - start + 1;
                res = [start, end];
            }
            winMap.set(s[start], (winMap.get(s[start]) || 0) - 1);
            if(subMap.has(s[start])) {
                if(winMap.get(s[start]) < subMap.get(s[start])) {
                    have--;
                }
            }
            start++;
        }
        end++;
    }
    return resLen === Infinity ? "" : s.slice(res[0], res[1] + 1);
};
