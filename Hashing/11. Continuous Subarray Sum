Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:
its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

//Idea:
-  [23,2,4,6,7], k = 6
- sum = 23 % 6 = 5, if you add multiple of 6 to 23 the remainder will be same, eg: 23+6%6 = 5, 23+12%6 = 5
- In map add this remainder and index + 1, we do +1 because we need to compare
- keep adding nums[i] to sum prefix and get the remainder
- if the remainder already exists, check the i & index+1 stored in the map
-- if i > index+1, this means there exists a continuous array with sum multiple of k

bool checkSubarraySum(vector<int>& nums, int k) {
    unordered_map<int,int> mp;
    mp[0] = 0;
    int sum = 0;

    for(int i = 0; i<nums.size(); i++){
        sum += nums[i];
        if(mp.find(sum%k) == mp.end()){
            mp[sum%k] = i + 1;
        } 
        else if(mp[sum%k] < i)
            return true;
    }
    return false;
}


JavaScript:
var checkSubarraySum = function(nums, k) {
    let map = new Map();
    map.set(0, 0);
    let sum = 0;
    for(let i = 0; i<nums.length; i++){
        sum += nums[i];
        if(!map.has(sum%k)){
            map.set(sum%k, i + 1);
        }else if(map.get(sum%k) < i){
            return true;
        }
    }
    return false;
};
