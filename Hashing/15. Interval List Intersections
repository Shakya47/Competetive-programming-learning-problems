You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj].
Each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.
The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. 
For example, the intersection of [1, 3] and [2, 4] is [2, 3].

//Idea:
- 2 pointer for both list
- start is max(start1, start2), end is min(end1, end2);
- if valid (start <= end) push into the res

var intervalIntersection = function(firstList, secondList) {
    let res = [];
    let i = 0;
    let j = 0;

    while(i < firstList.length && j < secondList.length) {
        let [start1, end1] = firstList[i];
        let [start2, end2] = secondList[j];

        let start = Math.max(start1, start2);
        let end = Math.min(end1, end2);

        if(start <= end) {
            res.push([start, end]);
        }
        if(end1 < end2) {
            i++;
        } else {
            j++;
        }
    }
    return res;
};
