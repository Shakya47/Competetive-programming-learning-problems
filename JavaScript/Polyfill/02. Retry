
//Delay function
const wait = ms => new Promise((resolve) => {
  setTimeout(() => resolve(), ms);
})

//Using thenable
const retryWithDelay = (fn, retries = 3, delay = 1000, finalErr = "Retry failed") =>
  new Promise((resolve, reject) => {
    return fn()
      .then(resolve)
      .catch((reason) => {
        if (retries <= 0) return reject(finalErr);
          return wait(delay)
            .then(retryWithDelay(fn, retries - 1, delay, finalErr))
            .then(resolve)
            .catch(reject);
      });
  });

//Using async-await
const retryWithDelay = async(fn, retries = 3, delay = 1000, finalErr = "Retry failed") =>{
  try {
    await fn();
  } catch (error) {
    if(retries <= 0) return Promise.reject(finalErr);
    await wait(delay);
    return retryWithDelay(fn, retries - 1, delay, finalErr);
  }
}
