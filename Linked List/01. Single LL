
#include <iostream>

using namespace std;

struct node{
    int data;
    node *next;
    node(int x){
        data = x;
        next = NULL;
    }
};

void diplayList(node *head){
    node *curr = head;
    while(curr!=NULL){
        cout<<curr->data<<" ";
        curr=curr->next;
    }
}

node *insertBegin(node *head){
    node *temp = new node(5);
    temp->next = head;
    return temp;
}

node *insertEnd(node *head){
    node *temp = new node(40);
    node *curr = head;
    while(curr->next!=NULL)
        curr = curr->next;
    curr->next = temp;
    return head;
}

node *deleteFirst(node *head){
    node *temp = head;
    temp = head->next;
    delete head;
    return temp;
}

node *deleteLast(node *head){
    node *curr = head;
    while(curr->next->next!=NULL)
        curr = curr->next;
    delete curr->next;
    curr->next = NULL;
    return head;
}

node *insertPos(node *head){
    node *temp = new node(25);
    int pos = 4;
    node *curr = head;
    int i=0;
    while(i<pos-2){
        curr = curr->next;
        i++;
    }
    temp->next = curr->next;
    curr->next = temp;
    return head;
}

void findMiddle(node *head){
    node *slow = head;
    node *fast = head;
    while(fast!=NULL && fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    
    cout<<endl<<slow->data;
}

void removeDuplicate(node *head){
    node *curr = head;
    while(curr!=NULL && curr->next!=NULL){
        if(curr->data == curr->next->data){
            node *temp = curr->next;
            curr->next = curr->next->next;
            delete temp;
        }
        else curr = curr->next;
    }
}

int main()
{
    node *head = new node(10);
    node *temp1 = new node(20);
    node *temp2 = new node(20);
    node *temp3 = new node(30);
    head->next = temp1;
    temp1->next = temp2;
    temp2->next = temp3;
    
   head = insertBegin(head);
   
   head = insertEnd(head);
   
  //head = deleteFirst(head);
   
 // head = deleteLast(head);
    
   //head = insertPos(head);    
   removeDuplicate(head);
   diplayList(head);
   //findMiddle(head);
  
   
}
