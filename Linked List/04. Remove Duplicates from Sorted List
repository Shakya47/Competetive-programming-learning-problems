//Idea:
- simply check if the next.val == val
- delete the next.val


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL) return NULL;
        if(head->next==NULL) return head;
        ListNode *curr = head;
        while(curr!=NULL && curr->next!=NULL){
            if(curr->val == curr->next->val){
                ListNode *temp = curr->next;
                curr->next = curr->next->next;
                delete temp;
            }
            else curr = curr->next;
        }
        return head;
    }
};

JavaScript:
var deleteDuplicates = function(head) {
    if(head == null) return null;
    if(head.next == null) return head;

    let curr = head
    while(curr!==null && curr.next!==null){
        if(curr.val === curr.next.val){
            let temp = curr.next;
            curr.next = curr.next.next;
            delete temp;
        }
        else curr = curr.next;
    }
    return head;
};
