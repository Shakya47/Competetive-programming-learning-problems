
//Idea:
- Simple 3 pointers to cycle through

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL) return NULL;
        if(head->next == NULL) return head;
        ListNode *prev=NULL;
        ListNode *curr = head;
        while(curr!=NULL){
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr=next;
        }
        return prev;
    }
};


JavaScript:

var reverseList = function(head) {
    if(head == null) return null;
    if(head.next == null) return head;

    let prev = null;
    let cur = head;
    while(cur !=null){
        let next = cur.next;
        cur.next = prev;
        prev = cur;
        cur = next;
    }

    return prev;
};
