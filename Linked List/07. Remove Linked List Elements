Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Input: head = [7,7,7,7], val = 7
Output: []

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
       // if(head->val == val)
        if(head==NULL) return NULL;
        while(head && head->val == val){
            ListNode *temp = head;
            head = head->next;
            delete temp;
        }
        
        ListNode *curr = head;
        while(curr!=NULL){
            if(curr->next!=NULL && curr->next->val == val){
                ListNode *temp = curr->next;
                curr->next = curr->next->next;
                delete temp;
            }
            else curr = curr->next;
        }
        return head;
    }
};

JavaScript:

var removeElements = function(head, val) {

    // Handle the edge case where the list is empty
    if (head === null) {
        return null;
    }

    // Skip any initial nodes with the given value
    while (head !== null && head.val === val) {
        head = head.next;
    }
    
    let cur = head;
    while(cur && cur.next ){
        if(cur.next.val === val){
            cur.next = cur.next.next;
        }else{
            cur = cur.next;
        }
    }    
    return head;
};
