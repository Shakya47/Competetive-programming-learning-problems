
Given the head of a linked list, remove the nth node from the end of the list and return its head.
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *start = new ListNode();
        start->next = head;
        ListNode *first = start;
        ListNode *second = start;
        

        while(n>0){
            second = second->next;
            n--;
        }
        while(second->next!=NULL){
            first = first->next;
            second = second->next;
        }
        
            ListNode *temp = first->next;
            //first->val = temp->val;
            first->next = first->next->next;
            delete temp;

        return start->next;
        
    }
};
