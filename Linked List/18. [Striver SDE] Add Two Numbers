You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
    ListNode *res = new ListNode(0);
    ListNode *head = res;
    int carry = 0;

    while(l1 != NULL && l2 != NULL){
        int sum = l1->val + l2->val + carry;
        ListNode *node = new ListNode(sum%10);
        // res->val = sum%10 ;
        carry = sum / 10;
        l1 = l1 ->next;
        l2 = l2->next;
        res->next = node;
        res = res->next;
    }
    while(l1 != NULL){
        int sum = l1->val + carry;
        ListNode *node = new ListNode(sum%10);
        carry = sum / 10;
        l1 = l1->next;
        res->next = node;
        res = res->next;
    }

    while(l2 != NULL){
        int sum = l2->val + carry;
        ListNode *node = new ListNode(sum%10);
        carry = sum / 10;
        l2 = l2->next;
        res->next = node;
        res = res->next;
    }

    if(carry){
        ListNode *node = new ListNode(carry);
        res->next = node;
    }

    return head->next;
        
    }
