You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.
Return true if and only if we can do this so that the resulting number is a power of two.

//Idea:
- make a vector which has all the powers of 2 from 0 to 30
- then sort each powers in ascending order
- sort the input in ascending order
- now compare all the powers with the input

bool reorderedPowerOf2(int n) {
    string s = to_string(n);
    sort(s.begin(), s.end());
    vector<string>powers;
    for(int i = 0; i<=30; i++){
        int p = pow(2,i);
        powers.push_back(to_string(p));
    }

    for(int i = 0; i<=30; i++)
        sort(powers[i].begin(), powers[i].end());

    for(int i = 0; i<=30; i++){
        if(powers[i] == s) return true;
    }
    return false;
}
