//Instead of histogram, a matrix is given, we have to go top to bottom & consider each row as histogram



class Solution {
    int maxArea(vector<int>a){
        int n = a.size();
        vector<int>ns(n);
        vector<int>ps(n);
        stack<int> s;
        for(int i=0; i<n;i++){
            while(s.empty()==false && (a[s.top()])>=(a[i]))
                s.pop();
            ps[i]= s.empty()?-1:s.top();
            s.push(i);      
        }
        while(s.empty()==false) s.pop();
        for(int i=n-1; i>=0;i--){
            while(s.empty()==false && (a[s.top()])>=(a[i]))
                s.pop();
            ns[i]= s.empty()?n:s.top();
            s.push(i);      
        }
        int cur=0;
        int res=0;
        for(int i =0; i<n; i++){
            cur = (ns[i]-ps[i]-1)*(a[i]);
            res = max(res, cur);
        }
        return res;
    }
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> m(n);

        for(int i = 0; i<n;i++){
        for(int j = 0; j<matrix[i].size();j++){
            m[i].push_back(matrix[i][j]-'0');

        }}
        int currMax = 0;
        int res = 0;
       
        
        for(int i =0; i<n; i++){
            currMax = maxArea(m[i]);
            res = max(currMax, res);
            if(i==n-1) break;
            for(int j=0; j<m[i].size(); j++){
                if(m[i+1][j]==0) continue;
                m[i+1][j]=m[i][j]+m[i+1][j];
            }
        }
        return res;
    }
};
