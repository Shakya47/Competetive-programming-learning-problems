You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

//Idea:
- Maximum in the window are stored at the front of the deque
- smaller than current are stored at back of deque

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> ans;
    for(int i = 0; i<nums.size(); i++){
        if(!dq.empty() && dq.front() == i-k) dq.pop_front();  //remove out of bound elements
        while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
        dq.push_back(i);
        if(i>=k-1) ans.push_back(nums[dq.front()]);   //for k = 3, the sliding window ends at indexs: 2,3,4,5,6,...
    }
    return ans;
}
