You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

//Idea:
- Maximum in the window are stored at the front of the deque
- smaller than current are stored at back of deque

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> ans;
    for(int i = 0; i<nums.size(); i++){
        if(!dq.empty() && dq.front() == i-k) dq.pop_front();  //remove out of bound elements
        while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
        dq.push_back(i);
        if(i>=k-1) ans.push_back(nums[dq.front()]);   //for k = 3, the sliding window ends at indexs: 2,3,4,5,6,...
    }
    return ans;
}


-------------------------------------------------------------------------
JavaScript:
//This works but will give you TLC
var maxSlidingWindow = function(nums, k) {
  let ans = [];
  for (let i = 0; i <= nums.length - k; i++) {
    ans.push(Math.max(...nums.slice(i, i + k)));
  }
  return ans;
};

//Best solution
var maxSlidingWindow = function(nums, k) {
    let ans = [];
    let dq = []; //Dequeue Increasing -> decreasing

    for (let i = 0; i < nums.length; i++) {
        while(dq.length && nums[i] >= nums[dq[dq.length - 1]]) {
            dq.pop();
        }

        dq.push(i); //store index because just value might give duplicate and we need to remove the values also later

        if(dq[0] <= i - k) { //remove the leftmost if it is not in the window anymore
            dq.shift();
        }
        if(i>= k -1) {
            ans.push(nums[dq[0]]);
        }
    }

    return ans;
};
