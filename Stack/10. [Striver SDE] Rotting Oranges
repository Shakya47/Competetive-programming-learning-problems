You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

//Idea
- BFS


int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int fresh = 0;
        for(int i = 0; i<grid.size(); i++){       
            for(int j = 0; j<grid[0].size(); j++){    //Simply count the no. of fresh and push rotten ones into the queue
                if(grid[i][j] == 1) fresh++;
                if(grid[i][j] == 2) q.push({i,j});
            }
        }
        int ans = -1;
        vector<int> ds = {-1,0,1,0,-1};   //helpful for finding all 4 direction
        while(!q.empty()){
            int n = q.size();
            while(n--){     //For each rotten queue, check top bottom left right for fresh orange
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                for(int i = 0; i<4; i++){
                    int r = x +ds[i];
                    int c = y +ds[i+1];
                    if(r>=0 && r<grid.size() && c>=0 && c<grid[0].size() && grid[r][c] == 1){ //if found, convert it into rotten and push it in the queue
                        grid[r][c] = 2;
                        fresh--;
                        q.push({r,c});
                    }
                }
            }
            ans++;
        }
        if(fresh > 0) return -1;
        if(ans == -1) return 0;
        return ans;
    }
