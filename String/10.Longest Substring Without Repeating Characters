//Given a string s, find the length of the longest substring without repeating characters.
//Input: s = "abcabcbb"
//Output: 3
//Explanation: The answer is "abc", with the length of 3.

//Idea: Best is to use the sliding window template
- 2 pointer approach, j pointer will be the end of the substring and i will be the start index of the substring
- keep storing the index of the characters till now
- i = max(i, prev[s[j]] + 1), this takes care of duplicates
-- if the whatever is the max will make the start index, if duplicate the prev[s[j]] will be > than i
-- and then when we do maxEnd = j - i + 1, it will give a short string as the duplicate was not considered

int lengthOfLongestSubstring(string s) {
        int res = 0;
        vector<int> prev(256, -1);
        int maxEnd = 0;
        int i = 0;
        for(int j=0; j<s.length(); j++){
            i = max(i, prev[s[j]]+1);
            maxEnd = j-i+1;
            res = max(res, maxEnd);
            prev[s[j]]=j;
        }
        return res;
    }

----------------------------------------------------------------
JavaScript: Sliding Window template solution
----------------------------------------------------------------
var lengthOfLongestSubstring = function(s) {
    let winMap = new Map();
    let start = 0, end = 0;
    let resLen = 0;

    while(end < s.length) {
        winMap.set(s[end], (winMap.get(s[end]) || 0) + 1);

        while(winMap.get(s[end]) > 1) { //if we find repeating characters
            winMap.set(s[start], winMap.get(s[start]) - 1);
            if(winMap.get(s[start]) === 0) {
                winMap.delete(s[start]); 
            }
            start++;
        }
        resLen = Math.max(resLen, end - start + 1);
        end++;
    }
    return resLen;
};
