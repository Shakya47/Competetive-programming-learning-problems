//Given a string s, find the length of the longest substring without repeating characters.
//Input: s = "abcabcbb"
//Output: 3
//Explanation: The answer is "abc", with the length of 3.

//Idea:
- 2 pointer approach, j pointer will be the end of the substring and i will be the start index of the substring
- keep storing the index of the characters till now
- i = max(i, prev[s[j]] + 1), this takes care of duplicates
-- if the whatever is the max will make the start index, if duplicate the prev[s[j]] will be > than i
-- and then when we do maxEnd = j - i + 1, it will give a short string as the duplicate was not considered

int lengthOfLongestSubstring(string s) {
        int res = 0;
        vector<int> prev(256, -1);
        int maxEnd = 0;
        int i = 0;
        for(int j=0; j<s.length(); j++){
            i = max(i, prev[s[j]]+1);
            maxEnd = j-i+1;
            res = max(res, maxEnd);
            prev[s[j]]=j;
        }
        return res;
    }


JavaScript:
var lengthOfLongestSubstring = function(s) {
    // Initialize variables
    let i = 0; // Starting index of current substring
    let maxEnd = 0; // Ending index of current substring
    let res = 0; // Length of longest substring found so far

    // Map to store the most recent index of each character
    let prev = new Map();

    // Iterate over the string characters
    for (let j = 0; j < s.length; j++) {
        // Check if the character is already present in the substring
        if (prev.has(s[j])) {
            // If the character is found, update the starting index of the substring
            // by moving it to the next index after the repeated character
            i = Math.max(i, prev.get(s[j]) + 1);
        }

        // Calculate the length of the current substring (from i to j)
        maxEnd = j - i + 1;

        // Update the maximum length found so far
        res = Math.max(res, maxEnd);

        // Store the current character and its index in the map
        prev.set(s[j], j);
    }

    // Return the length of the longest substring without repeating characters
    return res;
};
