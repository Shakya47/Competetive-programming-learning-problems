//Given a binary tree, determine if it is height-balanced.
//For this problem, a height-balanced binary tree is defined as:
//a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int checkBalanced(TreeNode* root){
        if(root == NULL) return 0;
        int lh = checkBalanced(root->left);
        if(lh==-1) return -1;
        int rh = checkBalanced(root->right);
        if(rh == -1) return -1;
        if(abs(lh-rh)>1) return -1;
        else return max(lh,rh)+1;
    }
public:
    bool isBalanced(TreeNode* root) {
        if(root == NULL) return true;
        bool res = (checkBalanced(root)>=0 ) ? true : false;
        return res;
    }
};
