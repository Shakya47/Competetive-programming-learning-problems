Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
//Here the width means - no. of nodes possible b/w leftmost & rightmost nodes

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        queue<pair<TreeNode*, unsigned long long>> q;
        q.push({root, 0});
        unsigned long long ans = 0;   //using unsigned long long to prevent overflow
        while(q.empty() == false){
            int n = q.size();
            unsigned long long minimum = q.front().second;
            unsigned long long first = q.front().second;
            unsigned long long last = q.back().second;
            for(int i =0; i<n; i++){
                unsigned long long cur_id = q.front().second-minimum;   //for removing overflow
                TreeNode* node = q.front().first;
                q.pop();
                if(node->left) q.push({node->left, 2*cur_id + 1});
                if(node->right) q.push({node->right, 2*cur_id + 2});

            }
            ans = max(ans, last-first+1);
         }
        return ans;
    }
};
