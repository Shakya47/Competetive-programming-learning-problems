/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int preIndex = 0;   //Very helpful as we will be going through preorder array to get root at every step
    TreeNode* create(vector<int>& preorder, vector<int>& inorder, int is, int ie){
        //base case
        if(is>ie) return NULL;
        
        TreeNode* node = new TreeNode(preorder[preIndex++]);    //preIndex is used and then incremented
        int inIndex;
        for(int i = is; i<=ie; i++){    //finding the index of root in inorder so that left and right side could be made
            if(inorder[i]== node->val){
                inIndex = i;
                break;
            }
        }
        node->left = create(preorder, inorder, is, inIndex-1);  //calling left tree of the root
        node->right = create(preorder, inorder, inIndex+1, ie); //calling right tree of the root
        return node;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return create(preorder, inorder, 0, inorder.size()-1);
        
    }
};
