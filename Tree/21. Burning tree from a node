Given a binary tree and a node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. 
It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.


//Hint: It's almost same as All Nodes Distance K in Binary Tree, instead of printing, we add the distance
//1 unit distance = 1 unit time
//For further clarification, refer 20. All Nodes Distance K in Binary Tree


class Solution {
    
    int res = 0;  //Global
    
    void burn(Node* root, Node* blockNode, int time){
        if(root == NULL || root == blockNode) return;
        res = max(res, time);
        burn(root->left, blockNode, time+1);
        burn(root->right, blockNode, time+1);
    }
    
    int burnTree(Node* root, int target){
        if(root == NULL) return -1;
        if(root->data == target){
            burn(root, NULL, 0);
            return 1;
        }
        
        int leftTime = burnTree(root->left, target);
        if(leftTime != -1){
            burn(root, root->left, leftTime);
            return leftTime+1;
        }
        
        int rightTime = burnTree(root->right, target);
        if(rightTime != -1){
            burn(root, root->right, rightTime);
            return rightTime+1;
        }
        return -1;
    }
    
  public:
    int minTime(Node* root, int target) 
    {
        burnTree(root, target);
        return res;
    }
};
