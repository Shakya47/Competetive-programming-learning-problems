Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.

Note that the root node is at depth 1.

The adding rule is:

-Given the integer depth, for each not null tree node cur at the depth depth - 1, 
 create two tree nodes with value val as cur's left subtree root and right subtree root.
-cur's original left subtree should be the left subtree of the new left subtree root.
-cur's original right subtree should be the right subtree of the new right subtree root.
-If depth == 1 that means there is no depth depth - 1 at all, 
 then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.
 
 //Idea:
 - a simple BFS would work
 - simply traverse to the desired depth, then use TreeNode constructor to create node
 
 
--------
BFS
--------
TreeNode* addOneRow(TreeNode* root, int val, int depth) {
    if(depth == 1) return new TreeNode(val, root, NULL);

    queue<TreeNode*> q;
    q.push(root);

    while(depth--){
        int n = q.size();
        for(int i = 0; i < n; i++){
            TreeNode* node = q.front();
            q.pop();
            if(depth > 1){
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            else{
                node->left = new TreeNode(val, node->left, NULL);
                node->right = new TreeNode(val, NULL, node->right);

            }
        }
    }
    return root;
}

------
DFS
------
TreeNode* addOneRow(TreeNode* root, int v, int d) {
    // exit case: empty tree
    if (!root) return root;
    // edge case: d == 1
    if (d == 1) return new TreeNode(v, root, NULL);
    // right depth reached!
    if (d == 2) {
        root->left = new TreeNode(v, root->left, NULL);
        root->right = new TreeNode(v, NULL, root->right);
        // stopping the recursion
        return root;
    }
    // recursive calls
    addOneRow(root->left, v, d - 1);
    addOneRow(root->right, v, d - 1);
    return root;
}
