Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

//Idea:
- do a preorder traversal

int ans = 0;
int maxAncestorDiff(TreeNode* root, int maxV = INT_MIN, int minV = INT_MAX) {
    if(!root) return 0;

    int curMax = max(maxV, root->val);
    int curMin = min(minV, root->val);
    ans = max(ans ,abs(curMax - curMin));
    maxAncestorDiff(root->left, curMax, curMin);
    maxAncestorDiff(root->right, curMax, curMin);
    return ans;
}
